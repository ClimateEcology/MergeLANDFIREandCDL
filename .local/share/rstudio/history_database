0:scales=list(draw=F))
0:merged_nogapsbin_map
0:library(gridExtra); library(cowplot); library(svglite)
0:# from github:
0:devtools::install_github("delta-rho/datadr")
0:devtools::install_github("delta-rho/trelliscope")
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_NVC_Merged_Binary.svg', width=9, height=20)
0:print(
0:plot_grid(cdlbin_map, nvcbin_map, merged_wgapsbin_map, merged_nogapsbin_map, align="v", nrow=4) #, rel_widths=c(1,1.1))
0:)
0:dev.off()
0:# save single binary maps
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL.svg', width=4.111, height=4.625)
0:print(
0:cdlbin_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC.svg', width=4.111, height=4.625)
0:print(
0:nvcbin_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep1_Binary.svg', width=4.111, height=4.625)
0:print(
0:merged_wgapsbin_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep2_Binary.svg', width=4.111, height=4.625)
0:print(
0:merged_nogapsbin_map
0:)
0:dev.off()
0:knitr::opts_chunk$set(echo = TRUE)
0:rm(list=ls())
0:library(raster); library(dplyr)
0:# load function to plot categorical maps
0:source('./code/functions/plot_categorical_raster.R')
0:# load function to adjust margin settings in levelplot
0:source('./code/functions/noMargins.R')
0:cdl <- raster::raster('./data/SpatialData/ExampleSmallRasters/small_cdl.tif')
0:nvc <- raster::raster('./data/SpatialData/ExampleSmallRasters/small_nvc.tif')
0:merged_wgaps <- raster::raster('./data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif') %>%
0:abs()
0:merged_nogaps <- raster::raster('./data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif') %>%
0:abs()
0:nvc_classes <- read.csv('./data/TabularData/LF_200NVC_05142020.csv') %>%
0:dplyr::mutate(VALUE = as.character(VALUE)) %>%
0:dplyr::filter(VALUE %in% raster::values(nvc))
0:# read CDL class names
0:cdl_classes <- read.csv('./data/TabularData/NASS_classes_pasture_is_arable.csv') %>%
0:dplyr::filter(VALUE < 500) %>% #filter out CDL classes that I created for a different project
0:dplyr::filter(VALUE %in% raster::values(cdl))
0:merged_attribute_table <- read.csv('./data/TabularData/CombinedRasterAttributeTable_CDLNVC.csv') %>%
0:dplyr::mutate(VALUE = abs(VALUE))
0:library(rasterVis); library(raster); library(svglite)
0:##### PLOT CDL
0:cdl_map <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes)
0:cdl_map
0:##### PLOT NVC
0:nvc_map <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes)
0:nvc_map
0:# save small rasters with correct colors
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL.svg', width=4.111, height=4.625)
0:print(
0:cdl_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC.svg', width=4.111, height=4.625)
0:print(
0:nvc_map
0:)
0:dev.off()
0:svglite::svglite('./figures/ExampleRasterMaps/ExampleRaster_ForScalebar.svg', width=4.111, height=4.625)
0:plot(nvc)
0:raster::scalebar(750, type='bar', divs=4, below='meters', adj=c(0.5, -1.25))
0:prettymapr::addnortharrow()
0:dev.off()
0:library(dplyr)
0:# filter down to classes contained in merged raster layers
0:all_classes <- dplyr::arrange(merged_attribute_table, VALUE)
0:merged_wgaps_classes <- dplyr::filter(all_classes, VALUE %in% raster::values(merged_wgaps))
0:merged_nogaps_classes <- dplyr::filter(all_classes, VALUE %in% raster::values(merged_nogaps))
0:##### Plot merged map, with gaps (output from step 1 of geospatial workflow)
0:merged_wgaps_map <- plot_categorical_raster(map=merged_wgaps, attribute_table=merged_wgaps_classes)
0:merged_wgaps_map
0:##### Plot merged map, without gaps (output from step 2 of geospatial workflow)
0:merged_nogaps_map <- plot_categorical_raster(map=merged_nogaps, attribute_table=merged_nogaps_classes)
0:merged_nogaps_map
0:merged_nogaps_map_wlegend <- plot_categorical_raster(map=merged_nogaps, attribute_table=merged_nogaps_classes, draw_legend=T)
0:merged_nogaps_map_wlegend
0:library(svglite)
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep1.svg', width=4.111, height=4.625)
0:print(
0:merged_wgaps_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep2.svg', width=4.111, height=4.625)
0:print(
0:merged_nogaps_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep2_wlegend.svg', width=5, height=4.625)
0:print(
0:merged_nogaps_map_wlegend
0:)
0:dev.off()
0:library(gridExtra); library(cowplot)
0:# from github:
0:devtools::install_github("delta-rho/datadr")
0:devtools::install_github("delta-rho/trelliscope")
0:library(trelliscope)
0:#grid.arrange(cdl_map, nvc_map, ncol=1, heights=c(1,1.1))
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_NVC_Merged.svg', width=9, height=20)
0:print(
0:plot_grid(cdl_map, nvc_map, merged_wgaps_map, merged_nogaps_map, align="v", nrow=4) #, rel_widths=c(1,1.1))
0:)
0:dev.off()
0:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
0:cdl_agclasses <- cdl_classes$VALUE[cdl_classes$GROUP == 'A']
0:cdl_bin <- cdl %in% cdl_agclasses
0:nvc_bin <- nvc %in% nvc_agclasses
0:cdl_bin_t <- ratify(cdl_bin)
0:rat <- levels(cdl_bin_t)[[1]]
0:rat$CLASS_NAME <- c("Not agriculture", "Agriculture")
0:bin_theme <- rasterTheme(c('#565656', '#CFCFCF'))
0:cdlbin_map <- rasterVis::levelplot(cdl_bin, par.settings= noMargins(bin_theme, rightkey=T),
0:margin=list(draw=F),
0:scales=list(draw=F))
0:cdlbin_map
0:nvcbin_map <- rasterVis::levelplot(nvc_bin, par.settings= noMargins(bin_theme, rightkey=T),
0:margin=list(draw=F),
0:scales=list(draw=F))
0:nvcbin_map
0:# merged raster with gaps
0:merged_wgaps_bin <- raster::reclassify(merged_wgaps, rcl=data.frame(is=1001, becomes=NA))# reclassify unresolved conflict as NA so it shows up on binary raster
0:merged_wgaps_bin[merged_wgaps_bin %in% cdl_agclasses & !is.na(merged_wgaps_bin)] <- 1
0:merged_wgaps_bin[!(merged_wgaps %in% cdl_agclasses) & !is.na(merged_wgaps_bin)] <- 0
0:# merged raster no gaps
0:merged_nogaps_bin <- raster::reclassify(merged_nogaps, rcl=data.frame(is=1001, becomes=NA))# reclassify unresolved conflict as NA so it shows up on binary raster
0:merged_nogaps_bin[merged_nogaps_bin %in% cdl_agclasses & !is.na(merged_nogaps_bin)] <- 1 #a different way to reclassify a raster
0:merged_nogaps_bin[!(merged_nogaps %in% cdl_agclasses) & !is.na(merged_nogaps_bin)] <- 0
0:merged_wgaps_bin_t <- ratify(merged_wgaps_bin)
0:rat <- levels(merged_wgaps_bin_t)[[1]]
0:rat$CLASS_NAME <- c("Not agriculture", "Agriculture")
0:bin_theme <- rasterTheme(c('#565656', '#CFCFCF'))
0:merged_wgapsbin_map <- rasterVis::levelplot(merged_wgaps_bin, par.settings= noMargins(bin_theme, rightkey=T),
0:margin=list(draw=F),
0:scales=list(draw=F))
0:merged_wgapsbin_map
0:merged_nogapsbin_map <- rasterVis::levelplot(merged_nogaps_bin, par.settings= noMargins(bin_theme, rightkey=T),
0:margin=list(draw=F),
0:scales=list(draw=F))
0:merged_nogapsbin_map
0:library(gridExtra); library(cowplot); library(svglite)
0:# from github:
0:devtools::install_github("delta-rho/datadr")
0:devtools::install_github("delta-rho/trelliscope")
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_NVC_Merged_Binary.svg', width=9, height=20)
0:print(
0:plot_grid(cdlbin_map, nvcbin_map, merged_wgapsbin_map, merged_nogapsbin_map, align="v", nrow=4) #, rel_widths=c(1,1.1))
0:)
0:dev.off()
0:# save single binary maps
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_Binary.svg', width=4.111, height=4.625)
0:print(
0:cdlbin_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC_Binary.svg', width=4.111, height=4.625)
0:print(
0:nvcbin_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep1_Binary.svg', width=4.111, height=4.625)
0:print(
0:merged_wgapsbin_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep2_Binary.svg', width=4.111, height=4.625)
0:print(
0:merged_nogapsbin_map
0:)
0:dev.off()
0:---
0:title: "Plot Example of Merged Rasters"
0:author: "Melanie Kammerer"
0:date: "1/6/2022"
0:output: html_document
0:---
0:```{r setup, include=FALSE}
0:knitr::opts_chunk$set(echo = TRUE)
0:```
0:## Objective
0:The goal of this script is to create a figure showing the input, intermediate, and output rasters associated with CDL-NVC merge workflow. I'm using small rasters created in MakeExampleSmallRasters.R script. The example raster happens to be in the Finger Lakes region.
0:## Load data
0:```{r loadrasters}
0:rm(list=ls())
0:library(raster); library(dplyr)
0:# load function to plot categorical maps
0:source('./code/functions/plot_categorical_raster.R')
0:# load function to adjust margin settings in levelplot
0:source('./code/functions/noMargins.R')
0:cdl <- raster::raster('./data/SpatialData/ExampleSmallRasters/small_cdl.tif')
0:nvc <- raster::raster('./data/SpatialData/ExampleSmallRasters/small_nvc.tif')
0:merged_wgaps <- raster::raster('./data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif') %>%
0:abs()
0:merged_nogaps <- raster::raster('./data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif') %>%
0:abs()
0:```
0:Load tabular data of class names to label maps
0:```{r loadtabulardata}
0:nvc_classes <- read.csv('./data/TabularData/LF_200NVC_05142020.csv') %>%
0:dplyr::mutate(VALUE = as.character(VALUE)) %>%
0:dplyr::filter(VALUE %in% raster::values(nvc))
0:# read CDL class names
0:cdl_classes <- read.csv('./data/TabularData/NASS_classes_pasture_is_arable.csv') %>%
0:dplyr::filter(VALUE < 500) %>% #filter out CDL classes that I created for a different project
0:dplyr::filter(VALUE %in% raster::values(cdl))
0:merged_attribute_table <- read.csv('./data/TabularData/CombinedRasterAttributeTable_CDLNVC.csv') %>%
0:dplyr::mutate(VALUE = abs(VALUE))
0:```
0:```{r makemaps, fig.width=9, fig.height=7}
0:library(rasterVis); library(raster); library(svglite)
0:##### PLOT CDL
0:cdl_map <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes)
0:cdl_map
0:cdl_wlegend <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes, draw_legend=T)
0:cdl_wlegend
0:##### PLOT NVC
0:nvc_map <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes)
0:nvc_map
0:nvc_map_wlegend <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes, draw_legend=T)
0:nvc_map_wlegend
0:# save small rasters with correct colors
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL.svg', width=4.111, height=4.625)
0:print(
0:cdl_map
0:)
0:dev.off()
0:# save small rasters with correct colors
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_wlegend.svg', width=5, height=4.625)
0:print(
0:cdl_map_wlegend
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC.svg', width=4.111, height=4.625)
0:print(
0:nvc_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC_wlegend.svg', width=5, height=4.625)
0:print(
0:nvc_map_wlegend
0:)
0:dev.off()
0:svglite::svglite('./figures/ExampleRasterMaps/ExampleRaster_ForScalebar.svg', width=4.111, height=4.625)
0:plot(nvc)
0:raster::scalebar(750, type='bar', divs=4, below='meters', adj=c(0.5, -1.25))
0:prettymapr::addnortharrow()
0:dev.off()
0:```
0:## Plot derived spatial products
0:```{r outputmaps, fig.width=9, fig.height=7}
0:library(dplyr)
0:# filter down to classes contained in merged raster layers
0:all_classes <- dplyr::arrange(merged_attribute_table, VALUE)
0:merged_wgaps_classes <- dplyr::filter(all_classes, VALUE %in% raster::values(merged_wgaps))
0:merged_nogaps_classes <- dplyr::filter(all_classes, VALUE %in% raster::values(merged_nogaps))
0:##### Plot merged map, with gaps (output from step 1 of geospatial workflow)
0:merged_wgaps_map <- plot_categorical_raster(map=merged_wgaps, attribute_table=merged_wgaps_classes)
0:merged_wgaps_map
0:##### Plot merged map, without gaps (output from step 2 of geospatial workflow)
0:merged_nogaps_map <- plot_categorical_raster(map=merged_nogaps, attribute_table=merged_nogaps_classes)
0:merged_nogaps_map
0:merged_nogaps_map_wlegend <- plot_categorical_raster(map=merged_nogaps, attribute_table=merged_nogaps_classes, draw_legend=T)
0:merged_nogaps_map_wlegend
0:library(svglite)
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep1.svg', width=4.111, height=4.625)
0:print(
0:merged_wgaps_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep2.svg', width=4.111, height=4.625)
0:print(
0:merged_nogaps_map
0:)
0:dev.off()
0:```
0:```{r arrangemaps, fig.height=11.5, fig.width=9}
0:library(gridExtra); library(cowplot)
0:# from github:
0:devtools::install_github("delta-rho/datadr")
0:devtools::install_github("delta-rho/trelliscope")
0:library(trelliscope)
0:#grid.arrange(cdl_map, nvc_map, ncol=1, heights=c(1,1.1))
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_NVC_Merged.svg', width=9, height=20)
0:print(
0:plot_grid(cdl_map, nvc_map, merged_wgaps_map, merged_nogaps_map, align="v", nrow=4) #, rel_widths=c(1,1.1))
0:)
0:dev.off()
0:```
0:## Binary versions of all maps
0:```{r binary}
0:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
0:cdl_agclasses <- cdl_classes$VALUE[cdl_classes$GROUP == 'A']
0:cdl_bin <- cdl %in% cdl_agclasses
0:nvc_bin <- nvc %in% nvc_agclasses
0:cdl_bin_t <- ratify(cdl_bin)
0:rat <- levels(cdl_bin_t)[[1]]
0:rat$CLASS_NAME <- c("Not agriculture", "Agriculture")
0:bin_theme <- rasterTheme(c('#565656', '#CFCFCF'))
0:cdlbin_map <- rasterVis::levelplot(cdl_bin, par.settings= noMargins(bin_theme, rightkey=T),
0:margin=list(draw=F),
0:scales=list(draw=F))
0:cdlbin_map
0:nvcbin_map <- rasterVis::levelplot(nvc_bin, par.settings= noMargins(bin_theme, rightkey=T),
0:margin=list(draw=F),
0:scales=list(draw=F))
0:nvcbin_map
0:# merged raster with gaps
0:merged_wgaps_bin <- raster::reclassify(merged_wgaps, rcl=data.frame(is=1001, becomes=NA))# reclassify unresolved conflict as NA so it shows up on binary raster
0:merged_wgaps_bin[merged_wgaps_bin %in% cdl_agclasses & !is.na(merged_wgaps_bin)] <- 1
0:merged_wgaps_bin[!(merged_wgaps %in% cdl_agclasses) & !is.na(merged_wgaps_bin)] <- 0
0:# merged raster no gaps
0:merged_nogaps_bin <- raster::reclassify(merged_nogaps, rcl=data.frame(is=1001, becomes=NA))# reclassify unresolved conflict as NA so it shows up on binary raster
0:merged_nogaps_bin[merged_nogaps_bin %in% cdl_agclasses & !is.na(merged_nogaps_bin)] <- 1 #a different way to reclassify a raster
0:merged_nogaps_bin[!(merged_nogaps %in% cdl_agclasses) & !is.na(merged_nogaps_bin)] <- 0
0:merged_wgaps_bin_t <- ratify(merged_wgaps_bin)
0:rat <- levels(merged_wgaps_bin_t)[[1]]
0:rat$CLASS_NAME <- c("Not agriculture", "Agriculture")
0:bin_theme <- rasterTheme(c('#565656', '#CFCFCF'))
0:merged_wgapsbin_map <- rasterVis::levelplot(merged_wgaps_bin, par.settings= noMargins(bin_theme, rightkey=T),
0:margin=list(draw=F),
0:scales=list(draw=F))
0:merged_wgapsbin_map
0:merged_nogapsbin_map <- rasterVis::levelplot(merged_nogaps_bin, par.settings= noMargins(bin_theme, rightkey=T),
0:margin=list(draw=F),
0:scales=list(draw=F))
0:merged_nogapsbin_map
0:```
0:```{r arrangemaps2, fig.height=11.5, fig.width=9}
0:library(gridExtra); library(cowplot); library(svglite)
0:# from github:
0:devtools::install_github("delta-rho/datadr")
0:devtools::install_github("delta-rho/trelliscope")
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_NVC_Merged_Binary.svg', width=9, height=20)
0:print(
0:plot_grid(cdlbin_map, nvcbin_map, merged_wgapsbin_map, merged_nogapsbin_map, align="v", nrow=4) #, rel_widths=c(1,1.1))
0:)
0:dev.off()
0:# save single binary maps
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_Binary.svg', width=4.111, height=4.625)
0:print(
0:cdlbin_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC_Binary.svg', width=4.111, height=4.625)
0:print(
0:nvcbin_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep1_Binary.svg', width=4.111, height=4.625)
0:print(
0:merged_wgapsbin_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_Merged_OutputStep2_Binary.svg', width=4.111, height=4.625)
0:print(
0:merged_nogapsbin_map
0:)
0:dev.off()
0:```
0:knitr::opts_chunk$set(echo = TRUE)
0:rm(list=ls())
0:library(raster); library(dplyr)
0:# load function to plot categorical maps
0:source('./code/functions/plot_categorical_raster.R')
0:# load function to adjust margin settings in levelplot
0:source('./code/functions/noMargins.R')
0:cdl <- raster::raster('./data/SpatialData/ExampleSmallRasters/small_cdl.tif')
0:nvc <- raster::raster('./data/SpatialData/ExampleSmallRasters/small_nvc.tif')
0:merged_wgaps <- raster::raster('./data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif') %>%
0:abs()
0:merged_nogaps <- raster::raster('./data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif') %>%
0:abs()
0:nvc_classes <- read.csv('./data/TabularData/LF_200NVC_05142020.csv') %>%
0:dplyr::mutate(VALUE = as.character(VALUE)) %>%
0:dplyr::filter(VALUE %in% raster::values(nvc))
0:# read CDL class names
0:cdl_classes <- read.csv('./data/TabularData/NASS_classes_pasture_is_arable.csv') %>%
0:dplyr::filter(VALUE < 500) %>% #filter out CDL classes that I created for a different project
0:dplyr::filter(VALUE %in% raster::values(cdl))
0:merged_attribute_table <- read.csv('./data/TabularData/CombinedRasterAttributeTable_CDLNVC.csv') %>%
0:dplyr::mutate(VALUE = abs(VALUE))
0:##### PLOT CDL
0:cdl_map <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes)
0:cdl_map
0:cdl_wlegend <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes, draw_legend=T)
0:cdl_wlegend
0:##### PLOT NVC
0:nvc_map <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes)
0:nvc_map
0:nvc_map_wlegend <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes, draw_legend=T)
0:nvc_map_wlegend
0:library(rasterVis); library(raster); library(svglite)
0:##### PLOT CDL
0:cdl_map <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes)
0:cdl_map
0:cdl_wlegend <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes, draw_legend=T)
0:cdl_wlegend
0:##### PLOT NVC
0:nvc_map <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes)
0:nvc_map
0:nvc_map_wlegend <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes, draw_legend=T)
0:nvc_map_wlegend
0:# save small rasters with correct colors
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL.svg', width=4.111, height=4.625)
0:print(
0:cdl_map
0:)
0:dev.off()
0:# save small rasters with correct colors
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_wlegend.svg', width=5, height=4.625)
0:print(
0:cdl_map_wlegend
0:)
0:library(rasterVis); library(raster); library(svglite)
0:##### PLOT CDL
0:cdl_map <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes)
0:cdl_map
0:cdl_wlegend <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes, draw_legend=T)
0:cdl_wlegend
0:##### PLOT NVC
0:nvc_map <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes)
0:nvc_map
0:nvc_wlegend <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes, draw_legend=T)
0:nvc_wlegend
0:# save small rasters with correct colors
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL.svg', width=4.111, height=4.625)
0:print(
0:cdl_map
0:)
0:dev.off()
0:# save small rasters with correct colors
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_wlegend.svg', width=5, height=4.625)
0:print(
0:cdl_wlegend
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC.svg', width=4.111, height=4.625)
0:print(
0:nvc_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC_wlegend.svg', width=5, height=4.625)
0:print(
0:nvc_wlegend
0:)
0:dev.off()
0:svglite::svglite('./figures/ExampleRasterMaps/ExampleRaster_ForScalebar.svg', width=4.111, height=4.625)
0:plot(nvc)
0:raster::scalebar(750, type='bar', divs=4, below='meters', adj=c(0.5, -1.25))
0:prettymapr::addnortharrow()
0:dev.off()
0:library(rasterVis); library(raster); library(svglite)
0:##### PLOT CDL
0:cdl_map <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes)
0:cdl_map
0:cdl_wlegend <- plot_categorical_raster(map=cdl, attribute_table=cdl_classes, draw_legend=T)
0:cdl_wlegend
0:##### PLOT NVC
0:nvc_map <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes)
0:nvc_map
0:nvc_wlegend <- plot_categorical_raster(map=nvc, attribute_table=nvc_classes, draw_legend=T)
0:nvc_wlegend
0:# save small rasters with correct colors
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL.svg', width=4.111, height=4.625)
0:print(
0:cdl_map
0:)
0:dev.off()
0:# save small rasters with correct colors
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_CDL_wlegend.svg', width=4.75, height=4.625)
0:print(
0:cdl_wlegend
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC.svg', width=4.111, height=4.625)
0:print(
0:nvc_map
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC_wlegend.svg', width=4.75, height=4.625)
0:print(
0:nvc_wlegend
0:)
0:dev.off()
0:svglite::svglite('./figures/ExampleRasterMaps/ExampleRaster_ForScalebar.svg', width=4.111, height=4.625)
0:plot(nvc)
0:raster::scalebar(750, type='bar', divs=4, below='meters', adj=c(0.5, -1.25))
0:prettymapr::addnortharrow()
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC_wlegend.svg', width=6.5, height=5.5)
0:print(
0:nvc_wlegend
0:)
0:dev.off()
0:svglite('./figures/ExampleRasterMaps/ExampleRaster_NVC_wlegend.svg', width=9, height=7)
0:print(
0:nvc_wlegend
0:)
0:dev.off()
1654097157134:# this script is the non-function version of merge function
1654097157178:library(raster); library(terra); library(dplyr)
1654097157282:##### input parameters
1654097157324:datadir <- './data' # directory where tabular and spatial data are stored
1654097157362:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654097157411:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654097157458:verbose <- T
1654097157496:veglayer <- 'nvc'
1654097157534:##### Step 0: Setup and load data
1654097157620:# load table of LANDFIRE vegetation classes
1654097157653:if (veglayer == 'evt') {
1654097157702:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654097157759:dplyr::mutate(VALUE = as.character(Value))
1654097157798:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654097157835:} else if (veglayer == 'nvc') {
1654097157871:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654097157908:dplyr::mutate(VALUE = as.character(VALUE))
1654097157968:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654097158005:}
1654097158110:# read CDL class names
1654097158147:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654097158181:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654097158216:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654097158292:cdl_classes <- read.csv(paste0(datadir, '/SpatialData/CDL/NASS_classes_simple_pasture_is_arable.csv')) %>%
1654097158324:dplyr::mutate(VALUE = as.character(-VALUE))
1654097158456:# create derived parameter of window_size
1654097158518:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654097158577:##### Step 1: Assign pixels that exactly match
1654097158638:# create vectors listing which CDL classes match LANDFIRE groups
1654097158673:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654097158710:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654097158837:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654097158869:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654097158976:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654097159014:grepl(NVC_Match2, pattern= 'Wheat')|
1654097159056:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654097159094:dplyr::pull(CLASS_NAME)
1654097159207:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654097159240:dplyr::pull(CLASS_NAME)
1654097159356:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654097159418:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654097159482:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654097159517:grepl(NVC_Match2, pattern= 'Row Crop') |
1654097159556:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654097159589:dplyr::pull(CLASS_NAME)
1654097159744:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654097159780:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654097159816:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654097159852:dplyr::pull(CLASS_NAME)
1654097160021:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654097160063:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654097160100:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654097160142:dplyr::pull(CLASS_NAME)
1654097160275:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654097160316:grepl(NVC_Match2, pattern= 'Pasture') |
1654097160353:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654097160397:dplyr::pull(CLASS_NAME)
1654097160508:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654097160551:grepl(NVC_Match2, pattern= 'Fallow') |
1654097160595:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654097160636:dplyr::pull(CLASS_NAME)
1654097160763:# Load spatial layers (NVC and CDL rasters)
1654097160795:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654097160856:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654097160960:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654097161057:##### clip CDL and NVC to smaller area
1654097161093:map <- cdl
1654097161186:# Crop CDL and NVC to small example raster
1654097161232:xpct=c(0.68, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654097161270:ypct=c(0.67, 0.68)
1654097161331:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654097161367:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654097161410:)
1654097161512:cdl <- terra::crop(cdl, y=bbox)
1654097161547:nvc <- terra::crop(nvc, y=bbox)
1654097214136:# this script is the non-function version of merge function
1654097214173:library(raster); library(terra); library(dplyr)
1654097214228:##### input parameters
1654097214259:datadir <- './data' # directory where tabular and spatial data are stored
1654097214290:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654097214320:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654097214348:verbose <- T
1654097214411:veglayer <- 'nvc'
1654097214453:##### Step 0: Setup and load data
1654097214534:# load table of LANDFIRE vegetation classes
1654097214568:if (veglayer == 'evt') {
1654097214597:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654097214625:dplyr::mutate(VALUE = as.character(Value))
1654097214676:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654097214727:} else if (veglayer == 'nvc') {
1654097214762:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654097214797:dplyr::mutate(VALUE = as.character(VALUE))
1654097214849:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654097214881:}
1654097214980:# read CDL class names
1654097215035:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654097215085:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654097215117:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654097215180:cdl_classes <- read.csv(paste0(datadir, '/SpatialData/CDL/NASS_classes_pasture_is_arable.csv')) %>%
1654097215216:dplyr::mutate(VALUE = as.character(-VALUE))
1654097232073:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654097232105:dplyr::mutate(VALUE = as.character(-VALUE))
1654097240389:# create derived parameter of window_size
1654097240422:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654097240484:##### Step 1: Assign pixels that exactly match
1654097240548:# create vectors listing which CDL classes match LANDFIRE groups
1654097240593:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654097240649:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654097240959:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654097240999:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654097241108:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654097241144:grepl(NVC_Match2, pattern= 'Wheat')|
1654097241187:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654097241245:dplyr::pull(CLASS_NAME)
1654097241376:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654097241411:dplyr::pull(CLASS_NAME)
1654097241490:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654097241566:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654097241647:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654097241680:grepl(NVC_Match2, pattern= 'Row Crop') |
1654097241724:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654097241781:dplyr::pull(CLASS_NAME)
1654097241912:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654097241949:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654097241989:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654097242028:dplyr::pull(CLASS_NAME)
1654097242152:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654097242186:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654097242223:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654097242261:dplyr::pull(CLASS_NAME)
1654097242460:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654097242505:grepl(NVC_Match2, pattern= 'Pasture') |
1654097242552:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654097242598:dplyr::pull(CLASS_NAME)
1654097242778:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654097242818:grepl(NVC_Match2, pattern= 'Fallow') |
1654097242863:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654097242905:dplyr::pull(CLASS_NAME)
1654097243064:# Load spatial layers (NVC and CDL rasters)
1654097243107:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654097243147:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654097243208:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654097243277:##### clip CDL and NVC to smaller area
1654097243347:map <- cdl
1654097243418:# Crop CDL and NVC to small example raster
1654097243454:xpct=c(0.68, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654097243493:ypct=c(0.67, 0.68)
1654097243553:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654097243589:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654097243655:)
1654097243736:cdl <- terra::crop(cdl, y=bbox)
1654097243776:nvc <- terra::crop(nvc, y=bbox)
1654097334739:# this script is the non-function version of merge function
1654097334788:library(raster); library(terra); library(dplyr)
1654097334849:##### input parameters
1654097334884:datadir <- './data' # directory where tabular and spatial data are stored
1654097334920:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654097334958:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654097334987:verbose <- T
1654097335014:veglayer <- 'nvc'
1654097335043:##### Step 0: Setup and load data
1654097335159:# load table of LANDFIRE vegetation classes
1654097335203:if (veglayer == 'evt') {
1654097335242:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654097335275:dplyr::mutate(VALUE = as.character(Value))
1654097335308:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654097335354:} else if (veglayer == 'nvc') {
1654097335405:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654097335454:dplyr::mutate(VALUE = as.character(VALUE))
1654097335510:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654097335549:}
1654097335651:# read CDL class names
1654097335708:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654097335745:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654097335786:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654097335843:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654097335874:dplyr::mutate(VALUE = as.character(-VALUE))
1654097336013:# create derived parameter of window_size
1654097336052:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654097336118:##### Step 1: Assign pixels that exactly match
1654097336194:# create vectors listing which CDL classes match LANDFIRE groups
1654097336237:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654097336287:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654097336356:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654097336403:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654097336529:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654097336576:grepl(NVC_Match2, pattern= 'Wheat')|
1654097336615:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654097336652:dplyr::pull(CLASS_NAME)
1654097336791:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654097336857:dplyr::pull(CLASS_NAME)
1654097336930:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654097337009:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654097337082:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654097337130:grepl(NVC_Match2, pattern= 'Row Crop') |
1654097337178:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654097337221:dplyr::pull(CLASS_NAME)
1654097337341:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654097337406:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654097337450:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654097337489:dplyr::pull(CLASS_NAME)
1654097337669:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654097337716:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654097337757:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654097337808:dplyr::pull(CLASS_NAME)
1654097337982:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654097338025:grepl(NVC_Match2, pattern= 'Pasture') |
1654097338066:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654097338111:dplyr::pull(CLASS_NAME)
1654097338235:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654097338298:grepl(NVC_Match2, pattern= 'Fallow') |
1654097338341:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654097338381:dplyr::pull(CLASS_NAME)
1654097338510:# Load spatial layers (NVC and CDL rasters)
1654097338544:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654097338601:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654097338715:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654097345556:##### clip CDL and NVC to smaller area
1654097345589:map <- cdl
1654097345640:# Crop CDL and NVC to small example raster
1654097345672:xpct=c(0.68, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654097345726:ypct=c(0.67, 0.68)
1654097345778:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654097345811:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654097345842:)
1654097345899:cdl <- terra::crop(cdl, y=bbox)
1654097345957:nvc <- terra::crop(nvc, y=bbox)
1654097360471:unique(values(cdl))
1654097377003:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654097377037:cdl[cdl == 61] <- 152
1654097380784:unique(values(cdl))
1654097393443:# check if projections of raster tiles are the same. If not, re-project them to match.
1654097393471:if (terra::crs(cdl) != terra::crs(nvc)) {
1654097393497:cdl <- terra::project(x=cdl, y=nvc)
1654097393522:}
1654097393618:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654097393650:'aquaculture', 'pasture', 'fallow')
1654097393704:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654097393740:for (habitat_name in habitat_groups) {
1654097393802:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654097393832:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654097393865:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654097393893:grepl(NVC_Name, pattern=habitat_name)) %>%
1654097393921:dplyr::pull(VALUE)
1654097393968:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654097393999:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654097394031:dplyr::pull(VALUE)
1654097394112:if (habitat_name == habitat_groups[[1]]) {
1654097394146:veglayer_copy <- nvc
1654097394175:}
1654097394229:# create binary layer indicating landfire and cdl match
1654097394261:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654097394318:if (verbose == T) {
1654097394381:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654097394418:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654097394449:}
1654097394508:remove <- (!both_orchard) * veglayer_copy
1654097394543:add <- both_orchard * (-cdl)
1654097394583:veglayer_copy <- remove + add
1654097394624:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654097394683:}
1654097395524:# reclassify remaining NVC ag cells to NA
1654097395561:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654097395605:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654097395668:if (verbose == T) {
1654097395705:logger::log_info('Step 1 complete.')
1654097395757:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654097395801:}
1654097395841:##### Step 2: Assign mismatched pixels based on neighborhood
1654097395906:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654097406797:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654097406839:# terra's 'focal' function only accepts one argument
1654097406893:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654097411220:allow_classes
1654097427352:# Is the option to define crop classes working?
1654097427394:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654097427440:window_size=window_size, replace_any=F)
1654097445343:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654097445398:# create extent object that removes the buffer cells
1654097445425:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654097445456:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654097445529:# subtract buffer distance from tile extent
1654097445596:original_extent <- terra::ext(c(
1654097445634:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654097445666:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654097445698:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654097445735:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654097445770:))
1654097445836:# crop tile to original extent (without buffer pixels)
1654097445887:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654097445972:# cropped version of output from step 1
1654097446026:output_step1 <- terra::crop(temp2, original_extent)
1654097446062:# cropped version of CDL
1654097446109:cdl_tomap <- terra::crop(cdl, original_extent)
1654097446174:# cropped version of NVC
1654097446206:nvc_tomap <- terra::crop(nvc, original_extent)
1654097446305:sort(unique(values(nvc_gapsfilled)))
1654097446363:length(which(values(nvc_gapsfilled) == -1001))
1654097488689:plot(nvc_gapsfilled)
1654097500293:plot(cdl)
1654097520064:# this script is the non-function version of merge function
1654097520105:library(raster); library(terra); library(dplyr)
1654097520194:##### input parameters
1654097520226:datadir <- './data' # directory where tabular and spatial data are stored
1654097520257:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654097520289:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654097520320:verbose <- T
1654097520358:veglayer <- 'nvc'
1654097520417:##### Step 0: Setup and load data
1654097520491:# load table of LANDFIRE vegetation classes
1654097520520:if (veglayer == 'evt') {
1654097520551:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654097520591:dplyr::mutate(VALUE = as.character(Value))
1654097520641:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654097520678:} else if (veglayer == 'nvc') {
1654097520711:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654097520742:dplyr::mutate(VALUE = as.character(VALUE))
1654097520810:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654097520847:}
1654097520939:# read CDL class names
1654097520967:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654097521004:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654097521037:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654097521093:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654097521123:dplyr::mutate(VALUE = as.character(-VALUE))
1654097521241:# create derived parameter of window_size
1654097521276:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654097521329:##### Step 1: Assign pixels that exactly match
1654097521390:# create vectors listing which CDL classes match LANDFIRE groups
1654097521437:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654097521466:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654097521522:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654097521552:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654097521742:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654097521797:grepl(NVC_Match2, pattern= 'Wheat')|
1654097521830:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654097521863:dplyr::pull(CLASS_NAME)
1654097521966:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654097522000:dplyr::pull(CLASS_NAME)
1654097522088:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654097522143:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654097522196:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654097522227:grepl(NVC_Match2, pattern= 'Row Crop') |
1654097522269:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654097522306:dplyr::pull(CLASS_NAME)
1654097522448:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654097522485:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654097522526:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654097522558:dplyr::pull(CLASS_NAME)
1654097522668:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654097522721:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654097522752:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654097522781:dplyr::pull(CLASS_NAME)
1654097522891:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654097522924:grepl(NVC_Match2, pattern= 'Pasture') |
1654097522984:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654097523019:dplyr::pull(CLASS_NAME)
1654097523136:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654097523170:grepl(NVC_Match2, pattern= 'Fallow') |
1654097523232:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654097523266:dplyr::pull(CLASS_NAME)
1654097523398:# Load spatial layers (NVC and CDL rasters)
1654097523435:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654097523466:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654097523549:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654097523623:##### clip CDL and NVC to smaller area
1654097523659:map <- cdl
1654097523723:# Crop CDL and NVC to small example raster
1654097523754:xpct=c(0.68, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654097523792:ypct=c(0.67, 0.68)
1654097523887:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654097523922:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654097523955:)
1654097524020:cdl <- terra::crop(cdl, y=bbox)
1654097524068:nvc <- terra::crop(nvc, y=bbox)
1654097524201:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654097524229:#cdl[cdl == 61] <- 152
1654097524285:# check if projections of raster tiles are the same. If not, re-project them to match.
1654097524318:if (terra::crs(cdl) != terra::crs(nvc)) {
1654097524345:cdl <- terra::project(x=cdl, y=nvc)
1654097524381:}
1654097524517:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654097524544:'aquaculture', 'pasture', 'fallow')
1654097524593:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654097524629:for (habitat_name in habitat_groups) {
1654097524692:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654097524726:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654097524763:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654097524823:grepl(NVC_Name, pattern=habitat_name)) %>%
1654097524855:dplyr::pull(VALUE)
1654097524911:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654097524942:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654097524973:dplyr::pull(VALUE)
1654097525055:if (habitat_name == habitat_groups[[1]]) {
1654097525087:veglayer_copy <- nvc
1654097525121:}
1654097525180:# create binary layer indicating landfire and cdl match
1654097525217:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654097525271:if (verbose == T) {
1654097525301:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654097525358:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654097525396:}
1654097525466:remove <- (!both_orchard) * veglayer_copy
1654097525501:add <- both_orchard * (-cdl)
1654097525534:veglayer_copy <- remove + add
1654097525571:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654097525632:}
1654097526478:# reclassify remaining NVC ag cells to NA
1654097526511:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654097526541:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654097526616:if (verbose == T) {
1654097526648:logger::log_info('Step 1 complete.')
1654097526682:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654097526720:}
1654097526754:##### Step 2: Assign mismatched pixels based on neighborhood
1654097526805:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654097526862:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654097526896:# terra's 'focal' function only accepts one argument
1654097526930:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654097526984:# Is the option to define crop classes working?
1654097527015:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654097527045:window_size=window_size, replace_any=F)
1654097527468:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654097527554:# create extent object that removes the buffer cells
1654097527625:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654097527665:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654097527727:# subtract buffer distance from tile extent
1654097527759:original_extent <- terra::ext(c(
1654097527800:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654097527834:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654097527877:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654097527937:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654097527979:))
1654097528036:# crop tile to original extent (without buffer pixels)
1654097528070:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654097528133:# cropped version of output from step 1
1654097528181:output_step1 <- terra::crop(temp2, original_extent)
1654097528235:# cropped version of CDL
1654097528290:cdl_tomap <- terra::crop(cdl, original_extent)
1654097528372:# cropped version of NVC
1654097528449:nvc_tomap <- terra::crop(nvc, original_extent)
1654097528525:sort(unique(values(nvc_gapsfilled)))
1654097528586:length(which(values(nvc_gapsfilled) == -1001))
1654097533022:plot(nvc_gapsfilled)
1654097535711:plot(cdl)
1654097571638:class(cdl)
1654097615600:# this script is the non-function version of merge function
1654097615630:library(raster); library(terra); library(dplyr)
1654097615677:##### input parameters
1654097615709:datadir <- './data' # directory where tabular and spatial data are stored
1654097615748:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654097615778:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654097615808:verbose <- T
1654097615864:veglayer <- 'nvc'
1654097615898:##### Step 0: Setup and load data
1654097615970:# load table of LANDFIRE vegetation classes
1654097616004:if (veglayer == 'evt') {
1654097616039:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654097616087:dplyr::mutate(VALUE = as.character(Value))
1654097616119:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654097616149:} else if (veglayer == 'nvc') {
1654097616180:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654097616210:dplyr::mutate(VALUE = as.character(VALUE))
1654097616259:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654097616287:}
1654097616402:# read CDL class names
1654097616432:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654097616464:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654097616496:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654097616548:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654097616578:dplyr::mutate(VALUE = as.character(-VALUE))
1654097616688:# create derived parameter of window_size
1654097616718:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654097616776:##### Step 1: Assign pixels that exactly match
1654097616830:# create vectors listing which CDL classes match LANDFIRE groups
1654097616862:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654097616897:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654097616979:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654097617020:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654097617116:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654097617146:grepl(NVC_Match2, pattern= 'Wheat')|
1654097617177:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654097617223:dplyr::pull(CLASS_NAME)
1654097617332:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654097617364:dplyr::pull(CLASS_NAME)
1654097617424:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654097617511:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654097617572:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654097617605:grepl(NVC_Match2, pattern= 'Row Crop') |
1654097617639:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654097617669:dplyr::pull(CLASS_NAME)
1654097617786:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654097617818:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654097617858:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654097617890:dplyr::pull(CLASS_NAME)
1654097618022:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654097618055:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654097618087:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654097618123:dplyr::pull(CLASS_NAME)
1654097618223:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654097618272:grepl(NVC_Match2, pattern= 'Pasture') |
1654097618302:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654097618333:dplyr::pull(CLASS_NAME)
1654097618457:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654097618493:grepl(NVC_Match2, pattern= 'Fallow') |
1654097618554:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654097618590:dplyr::pull(CLASS_NAME)
1654097618687:# Load spatial layers (NVC and CDL rasters)
1654097618717:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654097618751:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654097618801:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654097618882:##### clip CDL and NVC to smaller area
1654097618908:map <- cdl
1654097618956:# Crop CDL and NVC to small example raster
1654097618986:xpct=c(0.68, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654097619029:ypct=c(0.67, 0.68)
1654097619128:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654097619162:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654097619191:)
1654097619249:cdl <- terra::crop(cdl, y=bbox)
1654097619301:nvc <- terra::crop(nvc, y=bbox)
1654097619425:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654097619480:cdl[cdl == 61] <- 152
1654097619578:# check if projections of raster tiles are the same. If not, re-project them to match.
1654097619638:if (terra::crs(cdl) != terra::crs(nvc)) {
1654097619681:cdl <- terra::project(x=cdl, y=nvc)
1654097619716:}
1654097619807:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654097619847:'aquaculture', 'pasture', 'fallow')
1654097619901:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654097619954:for (habitat_name in habitat_groups) {
1654097620024:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654097620051:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654097620082:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654097620111:grepl(NVC_Name, pattern=habitat_name)) %>%
1654097620149:dplyr::pull(VALUE)
1654097620209:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654097620256:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654097620287:dplyr::pull(VALUE)
1654097620337:if (habitat_name == habitat_groups[[1]]) {
1654097620365:veglayer_copy <- nvc
1654097620393:}
1654097620445:# create binary layer indicating landfire and cdl match
1654097620486:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654097620578:if (verbose == T) {
1654097620611:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654097620649:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654097620681:}
1654097620739:remove <- (!both_orchard) * veglayer_copy
1654097620775:add <- both_orchard * (-cdl)
1654097620821:veglayer_copy <- remove + add
1654097620854:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654097620884:}
1654097621720:# reclassify remaining NVC ag cells to NA
1654097621751:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654097621784:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654097621847:if (verbose == T) {
1654097621881:logger::log_info('Step 1 complete.')
1654097621913:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654097621957:}
1654097621994:##### Step 2: Assign mismatched pixels based on neighborhood
1654097622048:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654097622103:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654097622137:# terra's 'focal' function only accepts one argument
1654097622174:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654097622234:# Is the option to define crop classes working?
1654097622262:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654097622287:window_size=window_size, replace_any=F)
1654097622604:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654097622649:# create extent object that removes the buffer cells
1654097622676:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654097622702:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654097622788:# subtract buffer distance from tile extent
1654097622845:original_extent <- terra::ext(c(
1654097622905:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654097622962:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654097623022:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654097623081:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654097623115:))
1654097623167:# crop tile to original extent (without buffer pixels)
1654097623193:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654097623245:# cropped version of output from step 1
1654097623277:output_step1 <- terra::crop(temp2, original_extent)
1654097623314:# cropped version of CDL
1654097623365:cdl_tomap <- terra::crop(cdl, original_extent)
1654097623439:# cropped version of NVC
1654097623467:nvc_tomap <- terra::crop(nvc, original_extent)
1654097623519:sort(unique(values(nvc_gapsfilled)))
1654097623589:length(which(values(nvc_gapsfilled) == -1001))
1654097623707:terra::writeRaster(cdl_tomap, './data/SpatialData/ExampleSmallRasters/small_cdl.tif', overwrite=T)
1654097623872:terra::writeRaster(nvc_tomap, './data/SpatialData/ExampleSmallRasters/small_nvc.tif', overwrite=T)
1654097624012:terra::writeRaster(output_step1, './data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif', overwrite=T)
1654097624157:terra::writeRaster(nvc_gapsfilled, './data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif', overwrite=T)
1654098259602:# this script is the non-function version of merge function
1654098259635:library(raster); library(terra); library(dplyr)
1654098259691:##### input parameters
1654098259719:datadir <- './data' # directory where tabular and spatial data are stored
1654098259749:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654098259780:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654098259815:verbose <- T
1654098259877:veglayer <- 'nvc'
1654098259917:##### Step 0: Setup and load data
1654098260009:# load table of LANDFIRE vegetation classes
1654098260048:if (veglayer == 'evt') {
1654098260078:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654098260136:dplyr::mutate(VALUE = as.character(Value))
1654098260170:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654098260203:} else if (veglayer == 'nvc') {
1654098260245:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654098260286:dplyr::mutate(VALUE = as.character(VALUE))
1654098260380:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654098260424:}
1654098260524:# read CDL class names
1654098260558:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654098260594:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654098260645:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654098260712:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654098260747:dplyr::mutate(VALUE = as.character(-VALUE))
1654098260843:# create derived parameter of window_size
1654098260870:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654098260944:##### Step 1: Assign pixels that exactly match
1654098261015:# create vectors listing which CDL classes match LANDFIRE groups
1654098261051:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654098261080:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654098261141:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654098261177:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654098261350:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654098261379:grepl(NVC_Match2, pattern= 'Wheat')|
1654098261415:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654098261450:dplyr::pull(CLASS_NAME)
1654098261599:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654098261659:dplyr::pull(CLASS_NAME)
1654098261731:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654098261789:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654098261850:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654098261879:grepl(NVC_Match2, pattern= 'Row Crop') |
1654098261913:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654098261989:dplyr::pull(CLASS_NAME)
1654098262096:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654098262128:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654098262159:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654098262192:dplyr::pull(CLASS_NAME)
1654098262336:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654098262369:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654098262399:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654098262433:dplyr::pull(CLASS_NAME)
1654098262546:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654098262579:grepl(NVC_Match2, pattern= 'Pasture') |
1654098262638:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654098262695:dplyr::pull(CLASS_NAME)
1654098262804:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654098262833:grepl(NVC_Match2, pattern= 'Fallow') |
1654098262868:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654098262913:dplyr::pull(CLASS_NAME)
1654098263041:# Load spatial layers (NVC and CDL rasters)
1654098263075:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654098263109:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654098263222:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654098263338:##### clip CDL and NVC to smaller area
1654098263373:map <- cdl
1654098263431:# Crop CDL and NVC to small example raster
1654098263461:xpct=c(0.67, 0.70) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654098263521:ypct=c(0.67, 0.70)
1654098263578:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654098263609:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654098263640:)
1654098263695:cdl <- terra::crop(cdl, y=bbox)
1654098263820:nvc <- terra::crop(nvc, y=bbox)
1654098264010:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654098264051:cdl[cdl == 61] <- 152
1654098264133:# check if projections of raster tiles are the same. If not, re-project them to match.
1654098264167:if (terra::crs(cdl) != terra::crs(nvc)) {
1654098264198:cdl <- terra::project(x=cdl, y=nvc)
1654098264230:}
1654098264335:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654098264371:'aquaculture', 'pasture', 'fallow')
1654098264426:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654098264465:for (habitat_name in habitat_groups) {
1654098264517:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654098264548:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654098264581:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654098264638:grepl(NVC_Name, pattern=habitat_name)) %>%
1654098264664:dplyr::pull(VALUE)
1654098264716:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654098264747:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654098264781:dplyr::pull(VALUE)
1654098264833:if (habitat_name == habitat_groups[[1]]) {
1654098264925:veglayer_copy <- nvc
1654098264968:}
1654098265048:# create binary layer indicating landfire and cdl match
1654098265109:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654098265195:if (verbose == T) {
1654098265249:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654098265282:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654098265324:}
1654098265398:remove <- (!both_orchard) * veglayer_copy
1654098265448:add <- both_orchard * (-cdl)
1654098265489:veglayer_copy <- remove + add
1654098265523:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654098265574:}
1654098266660:# reclassify remaining NVC ag cells to NA
1654098266696:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654098266735:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654098266803:if (verbose == T) {
1654098266835:logger::log_info('Step 1 complete.')
1654098266883:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654098266924:}
1654098266965:##### Step 2: Assign mismatched pixels based on neighborhood
1654098267029:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654098267084:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654098267127:# terra's 'focal' function only accepts one argument
1654098267165:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654098267218:# Is the option to define crop classes working?
1654098267263:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654098267296:window_size=window_size, replace_any=F)
1654098270206:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654098270260:# create extent object that removes the buffer cells
1654098270298:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654098270331:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654098270400:# subtract buffer distance from tile extent
1654098270475:original_extent <- terra::ext(c(
1654098270531:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654098270591:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654098270628:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654098270668:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654098270710:))
1654098270774:# crop tile to original extent (without buffer pixels)
1654098270805:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654098270883:# cropped version of output from step 1
1654098270915:output_step1 <- terra::crop(temp2, original_extent)
1654098270955:# cropped version of CDL
1654098270997:cdl_tomap <- terra::crop(cdl, original_extent)
1654098271061:# cropped version of NVC
1654098271100:nvc_tomap <- terra::crop(nvc, original_extent)
1654098271189:sort(unique(values(nvc_gapsfilled)))
1654098271253:length(which(values(nvc_gapsfilled) == -1001))
1654098285840:plot(nvc_gapsfilled)
1654098320155:# this script is the non-function version of merge function
1654098320184:library(raster); library(terra); library(dplyr)
1654098320288:##### input parameters
1654098320337:datadir <- './data' # directory where tabular and spatial data are stored
1654098320369:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654098320401:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654098320431:verbose <- T
1654098320464:veglayer <- 'nvc'
1654098320494:##### Step 0: Setup and load data
1654098320628:# load table of LANDFIRE vegetation classes
1654098320687:if (veglayer == 'evt') {
1654098320720:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654098320775:dplyr::mutate(VALUE = as.character(Value))
1654098320838:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654098320871:} else if (veglayer == 'nvc') {
1654098320903:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654098320930:dplyr::mutate(VALUE = as.character(VALUE))
1654098320990:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654098321029:}
1654098321117:# read CDL class names
1654098321146:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654098321176:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654098321206:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654098321255:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654098321294:dplyr::mutate(VALUE = as.character(-VALUE))
1654098321406:# create derived parameter of window_size
1654098321440:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654098321495:##### Step 1: Assign pixels that exactly match
1654098321559:# create vectors listing which CDL classes match LANDFIRE groups
1654098321620:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654098321664:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654098321734:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654098321770:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654098321895:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654098321947:grepl(NVC_Match2, pattern= 'Wheat')|
1654098321983:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654098322022:dplyr::pull(CLASS_NAME)
1654098322178:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654098322217:dplyr::pull(CLASS_NAME)
1654098322290:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654098322356:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654098322421:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654098322468:grepl(NVC_Match2, pattern= 'Row Crop') |
1654098322523:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654098322559:dplyr::pull(CLASS_NAME)
1654098322684:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654098322717:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654098322766:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654098322800:dplyr::pull(CLASS_NAME)
1654098322905:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654098322939:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654098322971:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654098323015:dplyr::pull(CLASS_NAME)
1654098323138:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654098323167:grepl(NVC_Match2, pattern= 'Pasture') |
1654098323202:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654098323235:dplyr::pull(CLASS_NAME)
1654098323349:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654098323382:grepl(NVC_Match2, pattern= 'Fallow') |
1654098323429:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654098323467:dplyr::pull(CLASS_NAME)
1654098323618:# Load spatial layers (NVC and CDL rasters)
1654098323653:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654098323692:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654098323739:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654098323822:##### clip CDL and NVC to smaller area
1654098323856:map <- cdl
1654098323954:# Crop CDL and NVC to small example raster
1654098323986:xpct=c(0.65, 0.70) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654098324018:ypct=c(0.65, 0.70)
1654098324077:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654098324113:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654098324149:)
1654098324253:cdl <- terra::crop(cdl, y=bbox)
1654098324414:nvc <- terra::crop(nvc, y=bbox)
1654098324660:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654098324703:cdl[cdl == 61] <- 152
1654098324780:# check if projections of raster tiles are the same. If not, re-project them to match.
1654098324844:if (terra::crs(cdl) != terra::crs(nvc)) {
1654098324881:cdl <- terra::project(x=cdl, y=nvc)
1654098324920:}
1654098325010:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654098325043:'aquaculture', 'pasture', 'fallow')
1654098325103:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654098325146:for (habitat_name in habitat_groups) {
1654098325200:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654098325234:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654098325267:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654098325304:grepl(NVC_Name, pattern=habitat_name)) %>%
1654098325347:dplyr::pull(VALUE)
1654098325437:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654098325478:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654098325509:dplyr::pull(VALUE)
1654098325561:if (habitat_name == habitat_groups[[1]]) {
1654098325596:veglayer_copy <- nvc
1654098325633:}
1654098325701:# create binary layer indicating landfire and cdl match
1654098325729:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654098325786:if (verbose == T) {
1654098325820:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654098325854:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654098325890:}
1654098325971:remove <- (!both_orchard) * veglayer_copy
1654098326014:add <- both_orchard * (-cdl)
1654098326051:veglayer_copy <- remove + add
1654098326088:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654098326122:}
1654098327064:# reclassify remaining NVC ag cells to NA
1654098327111:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654098327153:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654098327223:if (verbose == T) {
1654098327259:logger::log_info('Step 1 complete.')
1654098327307:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654098327336:}
1654098327369:##### Step 2: Assign mismatched pixels based on neighborhood
1654098327429:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654098327490:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654098327545:# terra's 'focal' function only accepts one argument
1654098327586:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654098327659:# Is the option to define crop classes working?
1654098327698:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654098327742:window_size=window_size, replace_any=F)
1654098334144:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654098334197:# create extent object that removes the buffer cells
1654098334251:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654098334289:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654098334374:# subtract buffer distance from tile extent
1654098334407:original_extent <- terra::ext(c(
1654098334436:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654098334468:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654098334503:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654098334539:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654098334569:))
1654098334626:# crop tile to original extent (without buffer pixels)
1654098334668:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654098334737:# cropped version of output from step 1
1654098334768:output_step1 <- terra::crop(temp2, original_extent)
1654098334818:# cropped version of CDL
1654098334849:cdl_tomap <- terra::crop(cdl, original_extent)
1654098334937:# cropped version of NVC
1654098334970:nvc_tomap <- terra::crop(nvc, original_extent)
1654098335042:sort(unique(values(nvc_gapsfilled)))
1654098335117:length(which(values(nvc_gapsfilled) == -1001))
1654098335217:plot(nvc_gapsfilled)
1654098353521:plot(nvc_gapsfilled == -1001)
1654098394768:# this script is the non-function version of merge function
1654098394817:library(raster); library(terra); library(dplyr)
1654098394876:##### input parameters
1654098394918:datadir <- './data' # directory where tabular and spatial data are stored
1654098394959:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654098394994:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654098395026:verbose <- T
1654098395064:veglayer <- 'nvc'
1654098395151:##### Step 0: Setup and load data
1654098395240:# load table of LANDFIRE vegetation classes
1654098395274:if (veglayer == 'evt') {
1654098395310:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654098395347:dplyr::mutate(VALUE = as.character(Value))
1654098395383:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654098395446:} else if (veglayer == 'nvc') {
1654098395482:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654098395515:dplyr::mutate(VALUE = as.character(VALUE))
1654098395569:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654098395608:}
1654098395733:# read CDL class names
1654098395777:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654098395816:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654098395853:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654098395917:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654098395959:dplyr::mutate(VALUE = as.character(-VALUE))
1654098396102:# create derived parameter of window_size
1654098396142:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654098396198:##### Step 1: Assign pixels that exactly match
1654098396261:# create vectors listing which CDL classes match LANDFIRE groups
1654098396296:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654098396368:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654098396430:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654098396469:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654098396574:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654098396614:grepl(NVC_Match2, pattern= 'Wheat')|
1654098396658:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654098396703:dplyr::pull(CLASS_NAME)
1654098396812:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654098396843:dplyr::pull(CLASS_NAME)
1654098396937:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654098397012:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654098397080:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654098397116:grepl(NVC_Match2, pattern= 'Row Crop') |
1654098397161:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654098397200:dplyr::pull(CLASS_NAME)
1654098397304:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654098397347:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654098397383:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654098397423:dplyr::pull(CLASS_NAME)
1654098397568:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654098397596:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654098397626:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654098397656:dplyr::pull(CLASS_NAME)
1654098397771:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654098397804:grepl(NVC_Match2, pattern= 'Pasture') |
1654098397841:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654098397879:dplyr::pull(CLASS_NAME)
1654098398024:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654098398070:grepl(NVC_Match2, pattern= 'Fallow') |
1654098398160:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654098398214:dplyr::pull(CLASS_NAME)
1654098398331:# Load spatial layers (NVC and CDL rasters)
1654098398369:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654098398403:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654098398480:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654098398571:##### clip CDL and NVC to smaller area
1654098398609:map <- cdl
1654098398666:# Crop CDL and NVC to small example raster
1654098398726:xpct=c(0.65, 0.70) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654098398767:ypct=c(0.69, 0.70)
1654098398834:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654098398880:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654098398913:)
1654098398975:cdl <- terra::crop(cdl, y=bbox)
1654098399058:nvc <- terra::crop(nvc, y=bbox)
1654098399197:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654098399247:cdl[cdl == 61] <- 152
1654098399326:# check if projections of raster tiles are the same. If not, re-project them to match.
1654098399364:if (terra::crs(cdl) != terra::crs(nvc)) {
1654098399407:cdl <- terra::project(x=cdl, y=nvc)
1654098399445:}
1654098399569:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654098399611:'aquaculture', 'pasture', 'fallow')
1654098399678:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654098399721:for (habitat_name in habitat_groups) {
1654098399806:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654098399842:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654098399886:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654098399931:grepl(NVC_Name, pattern=habitat_name)) %>%
1654098399963:dplyr::pull(VALUE)
1654098400024:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654098400085:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654098400124:dplyr::pull(VALUE)
1654098400183:if (habitat_name == habitat_groups[[1]]) {
1654098400214:veglayer_copy <- nvc
1654098400249:}
1654098400314:# create binary layer indicating landfire and cdl match
1654098400381:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654098400436:if (verbose == T) {
1654098400481:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654098400522:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654098400569:}
1654098400670:remove <- (!both_orchard) * veglayer_copy
1654098400708:add <- both_orchard * (-cdl)
1654098400753:veglayer_copy <- remove + add
1654098400797:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654098400832:}
1654098401752:# reclassify remaining NVC ag cells to NA
1654098401792:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654098401836:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654098401906:if (verbose == T) {
1654098401949:logger::log_info('Step 1 complete.')
1654098401988:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654098402019:}
1654098402058:##### Step 2: Assign mismatched pixels based on neighborhood
1654098402126:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654098402185:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654098402247:# terra's 'focal' function only accepts one argument
1654098402282:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654098402347:# Is the option to define crop classes working?
1654098402382:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654098402422:window_size=window_size, replace_any=F)
1654098403652:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654098403702:# create extent object that removes the buffer cells
1654098403734:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654098403768:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654098403820:# subtract buffer distance from tile extent
1654098403854:original_extent <- terra::ext(c(
1654098403915:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654098403955:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654098403988:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654098404023:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654098404063:))
1654098404133:# crop tile to original extent (without buffer pixels)
1654098404178:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654098404254:# cropped version of output from step 1
1654098404303:output_step1 <- terra::crop(temp2, original_extent)
1654098404340:# cropped version of CDL
1654098404370:cdl_tomap <- terra::crop(cdl, original_extent)
1654098404431:# cropped version of NVC
1654098404488:nvc_tomap <- terra::crop(nvc, original_extent)
1654098404561:sort(unique(values(nvc_gapsfilled)))
1654098404639:length(which(values(nvc_gapsfilled) == -1001))
1654098404699:plot(nvc_gapsfilled)
1654098439999:# this script is the non-function version of merge function
1654098440027:library(raster); library(terra); library(dplyr)
1654098440126:##### input parameters
1654098440156:datadir <- './data' # directory where tabular and spatial data are stored
1654098440190:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654098440218:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654098440254:verbose <- T
1654098440288:veglayer <- 'nvc'
1654098440318:##### Step 0: Setup and load data
1654098440425:# load table of LANDFIRE vegetation classes
1654098440456:if (veglayer == 'evt') {
1654098440485:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654098440519:dplyr::mutate(VALUE = as.character(Value))
1654098440546:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654098440575:} else if (veglayer == 'nvc') {
1654098440608:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654098440639:dplyr::mutate(VALUE = as.character(VALUE))
1654098440696:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654098440726:}
1654098440802:# read CDL class names
1654098440834:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654098440865:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654098440898:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654098441001:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654098441031:dplyr::mutate(VALUE = as.character(-VALUE))
1654098441110:# create derived parameter of window_size
1654098441140:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654098441203:##### Step 1: Assign pixels that exactly match
1654098441296:# create vectors listing which CDL classes match LANDFIRE groups
1654098441329:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654098441361:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654098441418:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654098441449:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654098441570:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654098441612:grepl(NVC_Match2, pattern= 'Wheat')|
1654098441647:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654098441682:dplyr::pull(CLASS_NAME)
1654098441780:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654098441812:dplyr::pull(CLASS_NAME)
1654098441877:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654098441947:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654098442014:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654098442055:grepl(NVC_Match2, pattern= 'Row Crop') |
1654098442099:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654098442141:dplyr::pull(CLASS_NAME)
1654098442270:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654098442302:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654098442343:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654098442385:dplyr::pull(CLASS_NAME)
1654098442491:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654098442534:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654098442564:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654098442598:dplyr::pull(CLASS_NAME)
1654098442731:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654098442761:grepl(NVC_Match2, pattern= 'Pasture') |
1654098442791:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654098442832:dplyr::pull(CLASS_NAME)
1654098442948:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654098442977:grepl(NVC_Match2, pattern= 'Fallow') |
1654098443009:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654098443038:dplyr::pull(CLASS_NAME)
1654098443153:# Load spatial layers (NVC and CDL rasters)
1654098443186:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654098443214:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654098443267:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654098443353:##### clip CDL and NVC to smaller area
1654098443388:map <- cdl
1654098443477:# Crop CDL and NVC to small example raster
1654098443528:xpct=c(0.65, 0.67) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654098443578:ypct=c(0.68, 0.69)
1654098443635:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654098443671:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654098443711:)
1654098443779:cdl <- terra::crop(cdl, y=bbox)
1654098443837:nvc <- terra::crop(nvc, y=bbox)
1654098443943:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654098443978:cdl[cdl == 61] <- 152
1654098444033:# check if projections of raster tiles are the same. If not, re-project them to match.
1654098444077:if (terra::crs(cdl) != terra::crs(nvc)) {
1654098444127:cdl <- terra::project(x=cdl, y=nvc)
1654098444162:}
1654098444248:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654098444281:'aquaculture', 'pasture', 'fallow')
1654098444351:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654098444409:for (habitat_name in habitat_groups) {
1654098444471:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654098444504:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654098444542:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654098444575:grepl(NVC_Name, pattern=habitat_name)) %>%
1654098444610:dplyr::pull(VALUE)
1654098444683:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654098444721:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654098444749:dplyr::pull(VALUE)
1654098444818:if (habitat_name == habitat_groups[[1]]) {
1654098444848:veglayer_copy <- nvc
1654098444886:}
1654098444965:# create binary layer indicating landfire and cdl match
1654098445012:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654098445074:if (verbose == T) {
1654098445111:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654098445142:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654098445202:}
1654098445278:remove <- (!both_orchard) * veglayer_copy
1654098445323:add <- both_orchard * (-cdl)
1654098445359:veglayer_copy <- remove + add
1654098445396:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654098445439:}
1654098446314:# reclassify remaining NVC ag cells to NA
1654098446349:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654098446406:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654098446470:if (verbose == T) {
1654098446510:logger::log_info('Step 1 complete.')
1654098446565:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654098446597:}
1654098446634:##### Step 2: Assign mismatched pixels based on neighborhood
1654098446684:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654098446736:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654098446769:# terra's 'focal' function only accepts one argument
1654098446800:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654098446868:# Is the option to define crop classes working?
1654098446904:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654098446946:window_size=window_size, replace_any=F)
1654098447536:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654098447590:# create extent object that removes the buffer cells
1654098447625:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654098447657:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654098447707:# subtract buffer distance from tile extent
1654098447738:original_extent <- terra::ext(c(
1654098447802:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654098447842:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654098447872:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654098447903:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654098447934:))
1654098447997:# crop tile to original extent (without buffer pixels)
1654098448031:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654098448121:# cropped version of output from step 1
1654098448159:output_step1 <- terra::crop(temp2, original_extent)
1654098448195:# cropped version of CDL
1654098448228:cdl_tomap <- terra::crop(cdl, original_extent)
1654098448288:# cropped version of NVC
1654098448320:nvc_tomap <- terra::crop(nvc, original_extent)
1654098448411:sort(unique(values(nvc_gapsfilled)))
1654098448505:length(which(values(nvc_gapsfilled) == -1001))
1654098448585:plot(nvc_gapsfilled)
1654098463027:# this script is the non-function version of merge function
1654098463083:library(raster); library(terra); library(dplyr)
1654098463153:##### input parameters
1654098463194:datadir <- './data' # directory where tabular and spatial data are stored
1654098463235:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654098463275:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654098463311:verbose <- T
1654098463351:veglayer <- 'nvc'
1654098463385:##### Step 0: Setup and load data
1654098463500:# load table of LANDFIRE vegetation classes
1654098463544:if (veglayer == 'evt') {
1654098463590:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654098463626:dplyr::mutate(VALUE = as.character(Value))
1654098463663:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654098463704:} else if (veglayer == 'nvc') {
1654098463744:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654098463801:dplyr::mutate(VALUE = as.character(VALUE))
1654098463876:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654098463920:}
1654098464215:# read CDL class names
1654098464253:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654098464290:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654098464333:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654098464437:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654098464482:dplyr::mutate(VALUE = as.character(-VALUE))
1654098464594:# create derived parameter of window_size
1654098464635:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654098464712:##### Step 1: Assign pixels that exactly match
1654098464834:# create vectors listing which CDL classes match LANDFIRE groups
1654098464889:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654098464931:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654098465001:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654098465030:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654098465164:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654098465198:grepl(NVC_Match2, pattern= 'Wheat')|
1654098465229:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654098465268:dplyr::pull(CLASS_NAME)
1654098465447:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654098465481:dplyr::pull(CLASS_NAME)
1654098465553:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654098465625:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654098465719:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654098465762:grepl(NVC_Match2, pattern= 'Row Crop') |
1654098465806:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654098465845:dplyr::pull(CLASS_NAME)
1654098466038:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654098466078:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654098466121:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654098466166:dplyr::pull(CLASS_NAME)
1654098466298:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654098466350:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654098466390:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654098466429:dplyr::pull(CLASS_NAME)
1654098466542:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654098466622:grepl(NVC_Match2, pattern= 'Pasture') |
1654098466657:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654098466691:dplyr::pull(CLASS_NAME)
1654098466837:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654098466902:grepl(NVC_Match2, pattern= 'Fallow') |
1654098466942:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654098466978:dplyr::pull(CLASS_NAME)
1654098467132:# Load spatial layers (NVC and CDL rasters)
1654098467191:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654098467225:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654098467280:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654098467378:##### clip CDL and NVC to smaller area
1654098467417:map <- cdl
1654098467533:# Crop CDL and NVC to small example raster
1654098467570:xpct=c(0.65, 0.67) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654098467611:ypct=c(0.68, 0.69)
1654098467692:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654098467739:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654098467800:)
1654098467874:cdl <- terra::crop(cdl, y=bbox)
1654098467966:nvc <- terra::crop(nvc, y=bbox)
1654098468147:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654098468192:#cdl[cdl == 61] <- 152
1654098468258:# check if projections of raster tiles are the same. If not, re-project them to match.
1654098468306:if (terra::crs(cdl) != terra::crs(nvc)) {
1654098468355:cdl <- terra::project(x=cdl, y=nvc)
1654098468398:}
1654098468497:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654098468537:'aquaculture', 'pasture', 'fallow')
1654098468610:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654098468660:for (habitat_name in habitat_groups) {
1654098468803:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654098468844:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654098468886:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654098468924:grepl(NVC_Name, pattern=habitat_name)) %>%
1654098468982:dplyr::pull(VALUE)
1654098469107:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654098469148:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654098469189:dplyr::pull(VALUE)
1654098469255:if (habitat_name == habitat_groups[[1]]) {
1654098469299:veglayer_copy <- nvc
1654098469337:}
1654098469466:# create binary layer indicating landfire and cdl match
1654098469505:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654098469588:if (verbose == T) {
1654098469626:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654098469674:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654098469715:}
1654098469816:remove <- (!both_orchard) * veglayer_copy
1654098469863:add <- both_orchard * (-cdl)
1654098469911:veglayer_copy <- remove + add
1654098469965:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654098470007:}
1654098471174:# reclassify remaining NVC ag cells to NA
1654098471209:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654098471254:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654098471321:if (verbose == T) {
1654098471363:logger::log_info('Step 1 complete.')
1654098471425:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654098471462:}
1654098471506:##### Step 2: Assign mismatched pixels based on neighborhood
1654098471564:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654098471632:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654098471676:# terra's 'focal' function only accepts one argument
1654098471727:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654098471792:# Is the option to define crop classes working?
1654098471846:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654098471891:window_size=window_size, replace_any=F)
1654098472569:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654098472636:# create extent object that removes the buffer cells
1654098472677:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654098472722:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654098472815:# subtract buffer distance from tile extent
1654098472854:original_extent <- terra::ext(c(
1654098472887:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654098472922:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654098472959:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654098472995:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654098473041:))
1654098473114:# crop tile to original extent (without buffer pixels)
1654098473146:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654098473207:# cropped version of output from step 1
1654098473255:output_step1 <- terra::crop(temp2, original_extent)
1654098473315:# cropped version of CDL
1654098473371:cdl_tomap <- terra::crop(cdl, original_extent)
1654098473438:# cropped version of NVC
1654098473471:nvc_tomap <- terra::crop(nvc, original_extent)
1654098473533:sort(unique(values(nvc_gapsfilled)))
1654098473615:length(which(values(nvc_gapsfilled) == -1001))
1654098473686:plot(nvc_gapsfilled)
1654098493589:# this script is the non-function version of merge function
1654098493621:library(raster); library(terra); library(dplyr)
1654098493684:##### input parameters
1654098493719:datadir <- './data' # directory where tabular and spatial data are stored
1654098493745:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654098493778:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654098493837:verbose <- T
1654098493884:veglayer <- 'nvc'
1654098493920:##### Step 0: Setup and load data
1654098494000:# load table of LANDFIRE vegetation classes
1654098494042:if (veglayer == 'evt') {
1654098494070:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654098494134:dplyr::mutate(VALUE = as.character(Value))
1654098494165:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654098494204:} else if (veglayer == 'nvc') {
1654098494230:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654098494266:dplyr::mutate(VALUE = as.character(VALUE))
1654098494328:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654098494361:}
1654098494599:# read CDL class names
1654098494628:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654098494680:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654098494715:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654098494781:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654098494820:dplyr::mutate(VALUE = as.character(-VALUE))
1654098494940:# create derived parameter of window_size
1654098494991:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654098495053:##### Step 1: Assign pixels that exactly match
1654098495130:# create vectors listing which CDL classes match LANDFIRE groups
1654098495177:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654098495207:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654098495267:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654098495304:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654098495405:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654098495439:grepl(NVC_Match2, pattern= 'Wheat')|
1654098495472:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654098495503:dplyr::pull(CLASS_NAME)
1654098495621:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654098495649:dplyr::pull(CLASS_NAME)
1654098495736:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654098495811:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654098495875:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654098495911:grepl(NVC_Match2, pattern= 'Row Crop') |
1654098495952:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654098496015:dplyr::pull(CLASS_NAME)
1654098496124:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654098496155:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654098496200:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654098496260:dplyr::pull(CLASS_NAME)
1654098496395:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654098496428:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654098496467:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654098496518:dplyr::pull(CLASS_NAME)
1654098496639:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654098496676:grepl(NVC_Match2, pattern= 'Pasture') |
1654098496709:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654098496740:dplyr::pull(CLASS_NAME)
1654098496857:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654098496892:grepl(NVC_Match2, pattern= 'Fallow') |
1654098496924:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654098496955:dplyr::pull(CLASS_NAME)
1654098497094:# Load spatial layers (NVC and CDL rasters)
1654098497123:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654098497157:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654098497229:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654098497312:##### clip CDL and NVC to smaller area
1654098497346:map <- cdl
1654098497403:# Crop CDL and NVC to small example raster
1654098497437:xpct=c(0.65, 0.66) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654098497467:ypct=c(0.68, 0.69)
1654098497538:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654098497577:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654098497616:)
1654098497685:cdl <- terra::crop(cdl, y=bbox)
1654098497741:nvc <- terra::crop(nvc, y=bbox)
1654098497917:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654098497961:#cdl[cdl == 61] <- 152
1654098498070:# check if projections of raster tiles are the same. If not, re-project them to match.
1654098498108:if (terra::crs(cdl) != terra::crs(nvc)) {
1654098498138:cdl <- terra::project(x=cdl, y=nvc)
1654098498174:}
1654098498268:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654098498331:'aquaculture', 'pasture', 'fallow')
1654098498398:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654098498434:for (habitat_name in habitat_groups) {
1654098498491:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654098498535:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654098498570:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654098498634:grepl(NVC_Name, pattern=habitat_name)) %>%
1654098498673:dplyr::pull(VALUE)
1654098498730:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654098498761:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654098498797:dplyr::pull(VALUE)
1654098498880:if (habitat_name == habitat_groups[[1]]) {
1654098498915:veglayer_copy <- nvc
1654098498947:}
1654098499003:# create binary layer indicating landfire and cdl match
1654098499047:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654098499107:if (verbose == T) {
1654098499155:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654098499199:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654098499235:}
1654098499306:remove <- (!both_orchard) * veglayer_copy
1654098499350:add <- both_orchard * (-cdl)
1654098499382:veglayer_copy <- remove + add
1654098499435:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654098499502:}
1654098500386:# reclassify remaining NVC ag cells to NA
1654098500432:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654098500472:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654098500546:if (verbose == T) {
1654098500579:logger::log_info('Step 1 complete.')
1654098500651:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654098500692:}
1654098500725:##### Step 2: Assign mismatched pixels based on neighborhood
1654098500784:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654098500836:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654098500869:# terra's 'focal' function only accepts one argument
1654098500921:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654098500979:# Is the option to define crop classes working?
1654098501019:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654098501057:window_size=window_size, replace_any=F)
1654098501416:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654098501493:# create extent object that removes the buffer cells
1654098501528:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654098501565:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654098501620:# subtract buffer distance from tile extent
1654098501660:original_extent <- terra::ext(c(
1654098501701:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654098501751:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654098501787:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654098501825:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654098501869:))
1654098501933:# crop tile to original extent (without buffer pixels)
1654098501968:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654098502061:# cropped version of output from step 1
1654098502102:output_step1 <- terra::crop(temp2, original_extent)
1654098502146:# cropped version of CDL
1654098502181:cdl_tomap <- terra::crop(cdl, original_extent)
1654098502247:# cropped version of NVC
1654098502281:nvc_tomap <- terra::crop(nvc, original_extent)
1654098502365:sort(unique(values(nvc_gapsfilled)))
1654098502434:length(which(values(nvc_gapsfilled) == -1001))
1654098502491:plot(nvc_gapsfilled)
1654098537679:# this script is the non-function version of merge function
1654098537718:library(raster); library(terra); library(dplyr)
1654098537793:##### input parameters
1654098537829:datadir <- './data' # directory where tabular and spatial data are stored
1654098537890:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654098537936:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654098537971:verbose <- T
1654098538003:veglayer <- 'nvc'
1654098538043:##### Step 0: Setup and load data
1654098538128:# load table of LANDFIRE vegetation classes
1654098538184:if (veglayer == 'evt') {
1654098538230:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654098538266:dplyr::mutate(VALUE = as.character(Value))
1654098538305:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654098538341:} else if (veglayer == 'nvc') {
1654098538381:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654098538419:dplyr::mutate(VALUE = as.character(VALUE))
1654098538499:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654098538537:}
1654098538640:# read CDL class names
1654098538677:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654098538711:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654098538745:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654098538839:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654098538884:dplyr::mutate(VALUE = as.character(-VALUE))
1654098538988:# create derived parameter of window_size
1654098539026:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654098539082:##### Step 1: Assign pixels that exactly match
1654098539165:# create vectors listing which CDL classes match LANDFIRE groups
1654098539212:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654098539249:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654098539323:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654098539360:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3)
1654098539495:wheat <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = 'Wheat')|
1654098539530:grepl(NVC_Match2, pattern= 'Wheat')|
1654098539568:grepl(NVC_Match3, pattern= 'Wheat')) %>%
1654098539603:dplyr::pull(CLASS_NAME)
1654098539788:orchard <- dplyr::filter(agclass_match, NVC_Match1 == 'Orchard') %>%
1654098539829:dplyr::pull(CLASS_NAME)
1654098539906:berries <- dplyr::filter(agclass_match, NVC_Match1 == "Bush fruit and berries") %>% dplyr::pull(CLASS_NAME)
1654098539975:vineyard <- dplyr::filter(agclass_match, NVC_Match1 == 'Vineyard') %>% dplyr::pull(CLASS_NAME)
1654098540072:row_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Row Crop') |
1654098540117:grepl(NVC_Match2, pattern= 'Row Crop') |
1654098540150:grepl(NVC_Match3, pattern= 'Row Crop')) %>%
1654098540188:dplyr::pull(CLASS_NAME)
1654098540316:close_grown_crop <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Close Grown Crop') |
1654098540367:grepl(NVC_Match2, pattern= 'Close Grown Crop') |
1654098540407:grepl(NVC_Match3, pattern= 'Close Grown Crop')) %>%
1654098540441:dplyr::pull(CLASS_NAME)
1654098540556:aquaculture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Aquaculture') |
1654098540602:grepl(NVC_Match2, pattern= 'Aquaculture') |
1654098540652:grepl(NVC_Match3, pattern= 'Aquaculture')) %>%
1654098540697:dplyr::pull(CLASS_NAME)
1654098540824:pasture <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Pasture') |
1654098540861:grepl(NVC_Match2, pattern= 'Pasture') |
1654098540916:grepl(NVC_Match3, pattern= 'Pasture')) %>%
1654098540950:dplyr::pull(CLASS_NAME)
1654098541085:fallow <- dplyr::filter(agclass_match, grepl(NVC_Match1, pattern= 'Fallow') |
1654098541118:grepl(NVC_Match2, pattern= 'Fallow') |
1654098541158:grepl(NVC_Match3, pattern= 'Fallow')) %>%
1654098541218:dplyr::pull(CLASS_NAME)
1654098541382:# Load spatial layers (NVC and CDL rasters)
1654098541417:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654098541456:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654098541534:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654098541626:##### clip CDL and NVC to smaller area
1654098541662:map <- cdl
1654098541737:# Crop CDL and NVC to small example raster
1654098541781:xpct=c(0.645, 0.66) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654098541826:ypct=c(0.675, 0.69)
1654098541883:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654098541919:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654098541958:)
1654098542043:cdl <- terra::crop(cdl, y=bbox)
1654098542119:nvc <- terra::crop(nvc, y=bbox)
1654098542270:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654098542307:#cdl[cdl == 61] <- 152
1654098542378:# check if projections of raster tiles are the same. If not, re-project them to match.
1654098542417:if (terra::crs(cdl) != terra::crs(nvc)) {
1654098542455:cdl <- terra::project(x=cdl, y=nvc)
1654098542490:}
1654098542620:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654098542658:'aquaculture', 'pasture', 'fallow')
1654098542721:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654098542762:for (habitat_name in habitat_groups) {
1654098542827:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654098542869:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654098542904:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654098542941:grepl(NVC_Name, pattern=habitat_name)) %>%
1654098542980:dplyr::pull(VALUE)
1654098543036:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654098543079:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654098543128:dplyr::pull(VALUE)
1654098543199:if (habitat_name == habitat_groups[[1]]) {
1654098543243:veglayer_copy <- nvc
1654098543281:}
1654098543347:# create binary layer indicating landfire and cdl match
1654098543379:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654098543453:if (verbose == T) {
1654098543492:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654098543537:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654098543581:}
1654098543664:remove <- (!both_orchard) * veglayer_copy
1654098543700:add <- both_orchard * (-cdl)
1654098543737:veglayer_copy <- remove + add
1654098543776:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654098543815:}
1654098545153:# reclassify remaining NVC ag cells to NA
1654098545190:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654098545228:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654098545324:if (verbose == T) {
1654098545362:logger::log_info('Step 1 complete.')
1654098545403:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654098545441:}
1654098545482:##### Step 2: Assign mismatched pixels based on neighborhood
1654098545549:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654098545646:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654098545714:# terra's 'focal' function only accepts one argument
1654098545749:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654098545817:# Is the option to define crop classes working?
1654098545854:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654098545893:window_size=window_size, replace_any=F)
1654098546630:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654098546694:# create extent object that removes the buffer cells
1654098546739:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654098546774:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654098546854:# subtract buffer distance from tile extent
1654098546890:original_extent <- terra::ext(c(
1654098546928:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654098546963:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654098547002:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654098547034:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654098547076:))
1654098547167:# crop tile to original extent (without buffer pixels)
1654098547212:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654098547281:# cropped version of output from step 1
1654098547316:output_step1 <- terra::crop(temp2, original_extent)
1654098547369:# cropped version of CDL
1654098547407:cdl_tomap <- terra::crop(cdl, original_extent)
1654098547480:# cropped version of NVC
1654098547530:nvc_tomap <- terra::crop(nvc, original_extent)
1654098547629:sort(unique(values(nvc_gapsfilled)))
1654098547693:length(which(values(nvc_gapsfilled) == -1001))
1654098547760:plot(nvc_gapsfilled)
1654098558658:terra::writeRaster(cdl_tomap, './data/SpatialData/ExampleSmallRasters/small_cdl.tif', overwrite=T)
1654098558791:terra::writeRaster(nvc_tomap, './data/SpatialData/ExampleSmallRasters/small_nvc.tif', overwrite=T)
1654098558929:terra::writeRaster(output_step1, './data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif', overwrite=T)
1654098559043:terra::writeRaster(nvc_gapsfilled, './data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif', overwrite=T)
1654098752461:allow_classes
1654099112811:# this script is the non-function version of merge function
1654099112850:library(raster); library(terra); library(dplyr)
1654099112950:##### input parameters
1654099112982:datadir <- './data' # directory where tabular and spatial data are stored
1654099113018:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654099113055:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654099113094:verbose <- T
1654099113128:veglayer <- 'nvc'
1654099113160:##### Step 0: Setup and load data
1654099113326:# load table of LANDFIRE vegetation classes
1654099113370:if (veglayer == 'evt') {
1654099113403:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654099113440:dplyr::mutate(VALUE = as.character(Value))
1654099113487:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654099113520:} else if (veglayer == 'nvc') {
1654099113566:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654099113613:dplyr::mutate(VALUE = as.character(VALUE))
1654099113676:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654099113716:}
1654099113812:# read CDL class names
1654099113870:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654099113914:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654099113945:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654099113999:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654099114041:dplyr::mutate(VALUE = as.character(-VALUE))
1654099114167:# create derived parameter of window_size
1654099114220:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654099114295:##### Step 1: Assign pixels that exactly match
1654099114360:# create vectors listing which CDL classes match LANDFIRE groups
1654099114415:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654099114461:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654099114565:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654099114600:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654099114675:# names of LANDFIRE classes (simplified) that will be re-assigned
1654099114725:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099114773:'aquaculture', 'pasture', 'fallow')
1654099114810:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654099114843:'Aquaculture', 'Pasture', 'Fallow')
1654099114903:# create R objects for each LANDFIRE class listing matching CDL classes
1654099114940:for (i in 1:length(habitat_groups)) {
1654099114979:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654099115030:grepl(NVC_Match2, pattern= search_strings[i])|
1654099115070:grepl(NVC_Match3, pattern= search_strings[i])|
1654099115106:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654099115148:dplyr::pull(CLASS_NAME) )
1654099115181:}
1654099115966:# Load spatial layers (NVC and CDL rasters)
1654099115996:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654099116028:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654099116117:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654099116271:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654099116333:mat <- data.frame(is=NA, becomes=0)
1654099116368:cdl <- terra::classify(cdl, rcl=mat)
1654099118158:##### clip CDL and NVC to smaller area
1654099118191:map <- cdl
1654099118249:# Crop CDL and NVC to small example raster
1654099118283:xpct=c(0.65, 0.66) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654099118311:ypct=c(0.68, 0.69)
1654099118393:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654099118435:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654099118467:)
1654099118545:cdl <- terra::crop(cdl, y=bbox)
1654099118589:nvc <- terra::crop(nvc, y=bbox)
1654099118754:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654099118801:#cdl[cdl == 61] <- 152
1654099118869:# check if projections of raster tiles are the same. If not, re-project them to match.
1654099118907:if (terra::crs(cdl) != terra::crs(nvc)) {
1654099118943:cdl <- terra::project(x=cdl, y=nvc)
1654099118971:}
1654099119081:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099119115:'aquaculture', 'pasture', 'fallow')
1654099119179:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654099119215:for (habitat_name in habitat_groups) {
1654099119273:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654099119320:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654099119366:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654099119403:grepl(NVC_Name, pattern=habitat_name)) %>%
1654099119433:dplyr::pull(VALUE)
1654099119490:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654099119523:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654099119601:dplyr::pull(VALUE)
1654099119668:if (habitat_name == habitat_groups[[1]]) {
1654099119720:veglayer_copy <- nvc
1654099119755:}
1654099119822:# create binary layer indicating landfire and cdl match
1654099119866:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654099119946:if (verbose == T) {
1654099119996:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654099120032:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654099120066:}
1654099120141:remove <- (!both_orchard) * veglayer_copy
1654099120180:add <- both_orchard * (-cdl)
1654099120214:veglayer_copy <- remove + add
1654099120249:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654099120285:}
1654099121526:# reclassify remaining NVC ag cells to NA
1654099121557:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654099121593:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654099121654:if (verbose == T) {
1654099121721:logger::log_info('Step 1 complete.')
1654099121753:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654099121787:}
1654099121824:##### Step 2: Assign mismatched pixels based on neighborhood
1654099121886:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654099121935:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654099121968:# terra's 'focal' function only accepts one argument
1654099122023:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654099122082:# Is the option to define crop classes working?
1654099122119:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654099122159:window_size=window_size, replace_any=F)
1654099122527:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654099122606:# create extent object that removes the buffer cells
1654099122651:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654099122691:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654099122757:# subtract buffer distance from tile extent
1654099122795:original_extent <- terra::ext(c(
1654099122857:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654099122901:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654099122938:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654099122974:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654099123009:))
1654099123075:# crop tile to original extent (without buffer pixels)
1654099123124:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654099123188:# cropped version of output from step 1
1654099123216:output_step1 <- terra::crop(temp2, original_extent)
1654099123247:# cropped version of CDL
1654099123275:cdl_tomap <- terra::crop(cdl, original_extent)
1654099123336:# cropped version of NVC
1654099123372:nvc_tomap <- terra::crop(nvc, original_extent)
1654099123457:sort(unique(values(nvc_gapsfilled)))
1654099123533:length(which(values(nvc_gapsfilled) == -1001))
1654099138844:plot(nvc_gapsfilled)
1654099171579:# this script is the non-function version of merge function
1654099171613:library(raster); library(terra); library(dplyr)
1654099171683:##### input parameters
1654099171716:datadir <- './data' # directory where tabular and spatial data are stored
1654099171762:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654099171820:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654099171847:verbose <- T
1654099171884:veglayer <- 'nvc'
1654099171924:##### Step 0: Setup and load data
1654099172003:# load table of LANDFIRE vegetation classes
1654099172049:if (veglayer == 'evt') {
1654099172085:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654099172112:dplyr::mutate(VALUE = as.character(Value))
1654099172145:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654099172182:} else if (veglayer == 'nvc') {
1654099172219:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654099172260:dplyr::mutate(VALUE = as.character(VALUE))
1654099172332:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654099172391:}
1654099172637:# read CDL class names
1654099172680:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654099172718:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654099172762:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654099172825:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654099172856:dplyr::mutate(VALUE = as.character(-VALUE))
1654099172963:# create derived parameter of window_size
1654099172997:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654099173060:##### Step 1: Assign pixels that exactly match
1654099173125:# create vectors listing which CDL classes match LANDFIRE groups
1654099173154:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654099173210:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654099173269:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654099173300:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654099173373:# names of LANDFIRE classes (simplified) that will be re-assigned
1654099173410:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099173445:'aquaculture', 'pasture', 'fallow')
1654099173501:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654099173537:'Aquaculture', 'Pasture', 'Fallow')
1654099173587:# create R objects for each LANDFIRE class listing matching CDL classes
1654099173621:for (i in 1:length(habitat_groups)) {
1654099173653:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654099173687:grepl(NVC_Match2, pattern= search_strings[i])|
1654099173719:grepl(NVC_Match3, pattern= search_strings[i])|
1654099173753:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654099173797:dplyr::pull(CLASS_NAME) )
1654099173830:}
1654099174531:# Load spatial layers (NVC and CDL rasters)
1654099174565:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654099174596:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654099174646:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654099174717:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654099174760:mat <- data.frame(is=NA, becomes=0)
1654099174809:cdl <- terra::classify(cdl, rcl=mat)
1654099176398:##### clip CDL and NVC to smaller area
1654099176426:map <- cdl
1654099176489:# Crop CDL and NVC to small example raster
1654099176526:xpct=c(0.1, 0.3) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654099176560:ypct=c(0.1, 0.3)
1654099176620:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654099176679:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654099176714:)
1654099176779:cdl <- terra::crop(cdl, y=bbox)
1654099176829:nvc <- terra::crop(nvc, y=bbox)
1654099177749:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654099177781:#cdl[cdl == 61] <- 152
1654099177836:# check if projections of raster tiles are the same. If not, re-project them to match.
1654099177878:if (terra::crs(cdl) != terra::crs(nvc)) {
1654099177914:cdl <- terra::project(x=cdl, y=nvc)
1654099177972:}
1654099178171:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099178213:'aquaculture', 'pasture', 'fallow')
1654099178289:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654099178322:for (habitat_name in habitat_groups) {
1654099178379:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654099178410:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654099178443:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654099178472:grepl(NVC_Name, pattern=habitat_name)) %>%
1654099178501:dplyr::pull(VALUE)
1654099178583:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654099178626:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654099178660:dplyr::pull(VALUE)
1654099178720:if (habitat_name == habitat_groups[[1]]) {
1654099178752:veglayer_copy <- nvc
1654099178784:}
1654099178831:# create binary layer indicating landfire and cdl match
1654099178873:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654099178936:if (verbose == T) {
1654099178976:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654099179010:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654099179050:}
1654099179144:remove <- (!both_orchard) * veglayer_copy
1654099179192:add <- both_orchard * (-cdl)
1654099179235:veglayer_copy <- remove + add
1654099179281:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654099179325:}
1654099181831:# reclassify remaining NVC ag cells to NA
1654099181864:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654099181900:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654099182015:if (verbose == T) {
1654099182044:logger::log_info('Step 1 complete.')
1654099182074:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654099182121:}
1654099182193:##### Step 2: Assign mismatched pixels based on neighborhood
1654099182244:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654099182307:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654099182342:# terra's 'focal' function only accepts one argument
1654099182376:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654099182472:# Is the option to define crop classes working?
1654099182523:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654099182568:window_size=window_size, replace_any=F)
1654099306229:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654099306283:# create extent object that removes the buffer cells
1654099306318:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654099306383:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654099306465:# subtract buffer distance from tile extent
1654099306502:original_extent <- terra::ext(c(
1654099306538:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654099306576:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654099306616:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654099306666:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654099306699:))
1654099306938:# crop tile to original extent (without buffer pixels)
1654099306969:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654099307038:# cropped version of output from step 1
1654099307077:output_step1 <- terra::crop(temp2, original_extent)
1654099307129:# cropped version of CDL
1654099307167:cdl_tomap <- terra::crop(cdl, original_extent)
1654099307311:# cropped version of NVC
1654099307344:nvc_tomap <- terra::crop(nvc, original_extent)
1654099307410:sort(unique(values(nvc_gapsfilled)))
1654099307564:length(which(values(nvc_gapsfilled) == -1001))
1654099307657:plot(nvc_gapsfilled)
1654099324990:plot(nvc_gapsfilled == -1001)
1654099369732:# this script is the non-function version of merge function
1654099369797:library(raster); library(terra); library(dplyr)
1654099369893:##### input parameters
1654099369927:datadir <- './data' # directory where tabular and spatial data are stored
1654099369961:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654099370005:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654099370040:verbose <- T
1654099370080:veglayer <- 'nvc'
1654099370130:##### Step 0: Setup and load data
1654099370212:# load table of LANDFIRE vegetation classes
1654099370251:if (veglayer == 'evt') {
1654099370286:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654099370324:dplyr::mutate(VALUE = as.character(Value))
1654099370356:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654099370398:} else if (veglayer == 'nvc') {
1654099370449:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654099370488:dplyr::mutate(VALUE = as.character(VALUE))
1654099370542:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654099370580:}
1654099370869:# read CDL class names
1654099370901:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654099370953:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654099370999:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654099371060:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654099371105:dplyr::mutate(VALUE = as.character(-VALUE))
1654099371240:# create derived parameter of window_size
1654099371278:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654099371342:##### Step 1: Assign pixels that exactly match
1654099371412:# create vectors listing which CDL classes match LANDFIRE groups
1654099371446:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654099371488:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654099371555:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654099371592:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654099371663:# names of LANDFIRE classes (simplified) that will be re-assigned
1654099371704:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099371753:'aquaculture', 'pasture', 'fallow')
1654099371791:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654099371830:'Aquaculture', 'Pasture', 'Fallow')
1654099371904:# create R objects for each LANDFIRE class listing matching CDL classes
1654099371937:for (i in 1:length(habitat_groups)) {
1654099371972:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654099372022:grepl(NVC_Match2, pattern= search_strings[i])|
1654099372070:grepl(NVC_Match3, pattern= search_strings[i])|
1654099372108:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654099372148:dplyr::pull(CLASS_NAME) )
1654099372193:}
1654099373258:# Load spatial layers (NVC and CDL rasters)
1654099373293:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654099373329:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654099373396:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654099373510:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654099373554:mat <- data.frame(is=NA, becomes=0)
1654099373589:cdl <- terra::classify(cdl, rcl=mat)
1654099375370:##### clip CDL and NVC to smaller area
1654099375407:map <- cdl
1654099375482:# Crop CDL and NVC to small example raster
1654099375534:xpct=c(0.3, 0.6) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654099375570:ypct=c(0.3, 0.6)
1654099375667:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654099375709:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654099375743:)
1654099375816:cdl <- terra::crop(cdl, y=bbox)
1654099375871:nvc <- terra::crop(nvc, y=bbox)
1654099377447:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654099377481:#cdl[cdl == 61] <- 152
1654099377533:# check if projections of raster tiles are the same. If not, re-project them to match.
1654099377572:if (terra::crs(cdl) != terra::crs(nvc)) {
1654099377613:cdl <- terra::project(x=cdl, y=nvc)
1654099377667:}
1654099378066:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099378115:'aquaculture', 'pasture', 'fallow')
1654099378192:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654099378231:for (habitat_name in habitat_groups) {
1654099378310:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654099378353:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654099378398:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654099378445:grepl(NVC_Name, pattern=habitat_name)) %>%
1654099378482:dplyr::pull(VALUE)
1654099378574:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654099378616:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654099378658:dplyr::pull(VALUE)
1654099378729:if (habitat_name == habitat_groups[[1]]) {
1654099378770:veglayer_copy <- nvc
1654099378817:}
1654099378918:# create binary layer indicating landfire and cdl match
1654099378969:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654099379040:if (verbose == T) {
1654099379077:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654099379111:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654099379143:}
1654099379231:remove <- (!both_orchard) * veglayer_copy
1654099379272:add <- both_orchard * (-cdl)
1654099379312:veglayer_copy <- remove + add
1654099379347:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654099379390:}
1654099383229:# reclassify remaining NVC ag cells to NA
1654099383260:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654099383292:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654099383477:if (verbose == T) {
1654099383514:logger::log_info('Step 1 complete.')
1654099383548:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654099383582:}
1654099383616:##### Step 2: Assign mismatched pixels based on neighborhood
1654099383677:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654099383740:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654099383778:# terra's 'focal' function only accepts one argument
1654099383818:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654099383889:# Is the option to define crop classes working?
1654099383958:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654099384029:window_size=window_size, replace_any=F)
1654099628450:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654099628534:# create extent object that removes the buffer cells
1654099628613:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654099628659:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654099628719:# subtract buffer distance from tile extent
1654099628759:original_extent <- terra::ext(c(
1654099628806:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654099628850:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654099628898:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654099628935:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654099628972:))
1654099629053:# crop tile to original extent (without buffer pixels)
1654099629099:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654099629217:# cropped version of output from step 1
1654099629257:output_step1 <- terra::crop(temp2, original_extent)
1654099629311:# cropped version of CDL
1654099629350:cdl_tomap <- terra::crop(cdl, original_extent)
1654099629452:# cropped version of NVC
1654099629499:nvc_tomap <- terra::crop(nvc, original_extent)
1654099629593:sort(unique(values(nvc_gapsfilled)))
1654099629773:length(which(values(nvc_gapsfilled) == -1001))
1654099629871:plot(nvc_gapsfilled)
1654099630530:plot(nvc_gapsfilled == -1001)
1654099690339:# this script is the non-function version of merge function
1654099690377:library(raster); library(terra); library(dplyr)
1654099690438:##### input parameters
1654099690471:datadir <- './data' # directory where tabular and spatial data are stored
1654099690502:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654099690547:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654099690603:verbose <- T
1654099690632:veglayer <- 'nvc'
1654099690661:##### Step 0: Setup and load data
1654099690740:# load table of LANDFIRE vegetation classes
1654099690773:if (veglayer == 'evt') {
1654099690803:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654099690845:dplyr::mutate(VALUE = as.character(Value))
1654099690874:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654099690906:} else if (veglayer == 'nvc') {
1654099690940:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654099690977:dplyr::mutate(VALUE = as.character(VALUE))
1654099691042:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654099691089:}
1654099691366:# read CDL class names
1654099691399:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654099691430:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654099691463:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654099691514:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654099691547:dplyr::mutate(VALUE = as.character(-VALUE))
1654099691665:# create derived parameter of window_size
1654099691698:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654099691757:##### Step 1: Assign pixels that exactly match
1654099691808:# create vectors listing which CDL classes match LANDFIRE groups
1654099691844:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654099691894:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654099691962:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654099691998:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654099692064:# names of LANDFIRE classes (simplified) that will be re-assigned
1654099692102:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099692135:'aquaculture', 'pasture', 'fallow')
1654099692187:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654099692220:'Aquaculture', 'Pasture', 'Fallow')
1654099692280:# create R objects for each LANDFIRE class listing matching CDL classes
1654099692313:for (i in 1:length(habitat_groups)) {
1654099692348:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654099692379:grepl(NVC_Match2, pattern= search_strings[i])|
1654099692417:grepl(NVC_Match3, pattern= search_strings[i])|
1654099692474:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654099692524:dplyr::pull(CLASS_NAME) )
1654099692557:}
1654099693373:# Load spatial layers (NVC and CDL rasters)
1654099693408:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654099693449:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654099693511:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654099693603:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654099693652:mat <- data.frame(is=NA, becomes=0)
1654099693687:cdl <- terra::classify(cdl, rcl=mat)
1654099695497:##### clip CDL and NVC to smaller area
1654099695530:map <- cdl
1654099695582:# Crop CDL and NVC to small example raster
1654099695617:xpct=c(0.3, 0.5) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654099695657:ypct=c(0.3, 0.45)
1654099695739:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654099695770:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654099695810:)
1654099695877:cdl <- terra::crop(cdl, y=bbox)
1654099695925:nvc <- terra::crop(nvc, y=bbox)
1654099696308:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654099696342:#cdl[cdl == 61] <- 152
1654099696406:# check if projections of raster tiles are the same. If not, re-project them to match.
1654099696454:if (terra::crs(cdl) != terra::crs(nvc)) {
1654099696523:cdl <- terra::project(x=cdl, y=nvc)
1654099696583:}
1654099696840:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099696889:'aquaculture', 'pasture', 'fallow')
1654099696951:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654099696987:for (habitat_name in habitat_groups) {
1654099697053:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654099697117:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654099697157:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654099697200:grepl(NVC_Name, pattern=habitat_name)) %>%
1654099697236:dplyr::pull(VALUE)
1654099697304:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654099697354:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654099697395:dplyr::pull(VALUE)
1654099697462:if (habitat_name == habitat_groups[[1]]) {
1654099697495:veglayer_copy <- nvc
1654099697537:}
1654099697596:# create binary layer indicating landfire and cdl match
1654099697651:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654099697777:if (verbose == T) {
1654099697816:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654099697852:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654099697893:}
1654099697961:remove <- (!both_orchard) * veglayer_copy
1654099698025:add <- both_orchard * (-cdl)
1654099698080:veglayer_copy <- remove + add
1654099698118:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654099698153:}
1654099700849:# reclassify remaining NVC ag cells to NA
1654099700893:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654099700930:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654099701051:if (verbose == T) {
1654099701123:logger::log_info('Step 1 complete.')
1654099701170:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654099701205:}
1654099701245:##### Step 2: Assign mismatched pixels based on neighborhood
1654099701317:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654099701399:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654099701447:# terra's 'focal' function only accepts one argument
1654099701491:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654099701553:# Is the option to define crop classes working?
1654099701597:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654099701640:window_size=window_size, replace_any=F)
1654099781694:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654099781771:# create extent object that removes the buffer cells
1654099781811:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654099781889:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654099781966:# subtract buffer distance from tile extent
1654099782008:original_extent <- terra::ext(c(
1654099782050:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654099782106:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654099782144:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654099782205:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654099782251:))
1654099782325:# crop tile to original extent (without buffer pixels)
1654099782369:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654099782455:# cropped version of output from step 1
1654099782525:output_step1 <- terra::crop(temp2, original_extent)
1654099782578:# cropped version of CDL
1654099782614:cdl_tomap <- terra::crop(cdl, original_extent)
1654099782701:# cropped version of NVC
1654099782745:nvc_tomap <- terra::crop(nvc, original_extent)
1654099782837:sort(unique(values(nvc_gapsfilled)))
1654099782955:length(which(values(nvc_gapsfilled) == -1001))
1654099783040:plot(nvc_gapsfilled)
1654099783691:plot(nvc_gapsfilled == -1001)
1654099827354:# this script is the non-function version of merge function
1654099827399:library(raster); library(terra); library(dplyr)
1654099827453:##### input parameters
1654099827480:datadir <- './data' # directory where tabular and spatial data are stored
1654099827510:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654099827540:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654099827571:verbose <- T
1654099827615:veglayer <- 'nvc'
1654099827646:##### Step 0: Setup and load data
1654099827716:# load table of LANDFIRE vegetation classes
1654099827747:if (veglayer == 'evt') {
1654099827788:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654099827825:dplyr::mutate(VALUE = as.character(Value))
1654099827865:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654099827896:} else if (veglayer == 'nvc') {
1654099827928:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654099827965:dplyr::mutate(VALUE = as.character(VALUE))
1654099828017:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654099828049:}
1654099828271:# read CDL class names
1654099828303:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654099828335:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654099828374:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654099828466:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654099828516:dplyr::mutate(VALUE = as.character(-VALUE))
1654099828616:# create derived parameter of window_size
1654099828645:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654099828695:##### Step 1: Assign pixels that exactly match
1654099828748:# create vectors listing which CDL classes match LANDFIRE groups
1654099828776:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654099828822:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654099828882:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654099828909:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654099828978:# names of LANDFIRE classes (simplified) that will be re-assigned
1654099829016:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099829049:'aquaculture', 'pasture', 'fallow')
1654099829100:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654099829163:'Aquaculture', 'Pasture', 'Fallow')
1654099829217:# create R objects for each LANDFIRE class listing matching CDL classes
1654099829250:for (i in 1:length(habitat_groups)) {
1654099829279:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654099829313:grepl(NVC_Match2, pattern= search_strings[i])|
1654099829345:grepl(NVC_Match3, pattern= search_strings[i])|
1654099829394:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654099829442:dplyr::pull(CLASS_NAME) )
1654099829471:}
1654099830210:# Load spatial layers (NVC and CDL rasters)
1654099830239:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654099830266:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654099830322:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654099830397:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654099830441:mat <- data.frame(is=NA, becomes=0)
1654099830481:cdl <- terra::classify(cdl, rcl=mat)
1654099831958:##### clip CDL and NVC to smaller area
1654099831987:map <- cdl
1654099832036:# Crop CDL and NVC to small example raster
1654099832065:xpct=c(0.35, 0.4) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654099832096:ypct=c(0.3, 0.5)
1654099832150:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654099832213:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654099832248:)
1654099832303:cdl <- terra::crop(cdl, y=bbox)
1654099832348:nvc <- terra::crop(nvc, y=bbox)
1654099832732:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654099832794:#cdl[cdl == 61] <- 152
1654099832877:# check if projections of raster tiles are the same. If not, re-project them to match.
1654099832907:if (terra::crs(cdl) != terra::crs(nvc)) {
1654099832936:cdl <- terra::project(x=cdl, y=nvc)
1654099832964:}
1654099833092:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099833119:'aquaculture', 'pasture', 'fallow')
1654099833176:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654099833215:for (habitat_name in habitat_groups) {
1654099833267:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654099833299:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654099833357:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654099833419:grepl(NVC_Name, pattern=habitat_name)) %>%
1654099833450:dplyr::pull(VALUE)
1654099833498:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654099833526:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654099833556:dplyr::pull(VALUE)
1654099833603:if (habitat_name == habitat_groups[[1]]) {
1654099833664:veglayer_copy <- nvc
1654099833739:}
1654099833797:# create binary layer indicating landfire and cdl match
1654099833831:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654099833881:if (verbose == T) {
1654099833918:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654099833972:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654099834039:}
1654099834101:remove <- (!both_orchard) * veglayer_copy
1654099834134:add <- both_orchard * (-cdl)
1654099834170:veglayer_copy <- remove + add
1654099834219:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654099834293:}
1654099835624:# reclassify remaining NVC ag cells to NA
1654099835658:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654099835696:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654099835769:if (verbose == T) {
1654099835810:logger::log_info('Step 1 complete.')
1654099835888:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654099835927:}
1654099835960:##### Step 2: Assign mismatched pixels based on neighborhood
1654099836012:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654099836062:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654099836095:# terra's 'focal' function only accepts one argument
1654099836143:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654099836241:# Is the option to define crop classes working?
1654099836310:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654099836350:window_size=window_size, replace_any=F)
1654099862580:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654099862648:# create extent object that removes the buffer cells
1654099862683:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654099862721:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654099862781:# subtract buffer distance from tile extent
1654099862844:original_extent <- terra::ext(c(
1654099862875:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654099862912:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654099862956:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654099862986:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654099863022:))
1654099863115:# crop tile to original extent (without buffer pixels)
1654099863158:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654099863231:# cropped version of output from step 1
1654099863275:output_step1 <- terra::crop(temp2, original_extent)
1654099863316:# cropped version of CDL
1654099863366:cdl_tomap <- terra::crop(cdl, original_extent)
1654099863445:# cropped version of NVC
1654099863492:nvc_tomap <- terra::crop(nvc, original_extent)
1654099863558:sort(unique(values(nvc_gapsfilled)))
1654099863647:length(which(values(nvc_gapsfilled) == -1001))
1654099863718:plot(nvc_gapsfilled)
1654099864208:plot(nvc_gapsfilled == -1001)
1654099886418:# this script is the non-function version of merge function
1654099886461:library(raster); library(terra); library(dplyr)
1654099886697:##### input parameters
1654099886739:datadir <- './data' # directory where tabular and spatial data are stored
1654099886782:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654099886822:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654099886855:verbose <- T
1654099886887:veglayer <- 'nvc'
1654099886918:##### Step 0: Setup and load data
1654099887038:# load table of LANDFIRE vegetation classes
1654099887097:if (veglayer == 'evt') {
1654099887137:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654099887172:dplyr::mutate(VALUE = as.character(Value))
1654099887209:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654099887257:} else if (veglayer == 'nvc') {
1654099887300:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654099887338:dplyr::mutate(VALUE = as.character(VALUE))
1654099887430:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654099887464:}
1654099887551:# read CDL class names
1654099887594:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654099887632:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654099887682:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654099887781:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654099887819:dplyr::mutate(VALUE = as.character(-VALUE))
1654099887927:# create derived parameter of window_size
1654099887998:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654099888101:##### Step 1: Assign pixels that exactly match
1654099888172:# create vectors listing which CDL classes match LANDFIRE groups
1654099888198:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654099888230:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654099888292:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654099888324:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654099888444:# names of LANDFIRE classes (simplified) that will be re-assigned
1654099888480:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099888513:'aquaculture', 'pasture', 'fallow')
1654099888549:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654099888597:'Aquaculture', 'Pasture', 'Fallow')
1654099888653:# create R objects for each LANDFIRE class listing matching CDL classes
1654099888681:for (i in 1:length(habitat_groups)) {
1654099888723:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654099888787:grepl(NVC_Match2, pattern= search_strings[i])|
1654099888818:grepl(NVC_Match3, pattern= search_strings[i])|
1654099888854:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654099888884:dplyr::pull(CLASS_NAME) )
1654099888926:}
1654099889710:# Load spatial layers (NVC and CDL rasters)
1654099889741:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654099889777:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654099889845:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654099889953:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654099889996:mat <- data.frame(is=NA, becomes=0)
1654099890028:cdl <- terra::classify(cdl, rcl=mat)
1654099891493:##### clip CDL and NVC to smaller area
1654099891522:map <- cdl
1654099891576:# Crop CDL and NVC to small example raster
1654099891612:xpct=c(0.35, 0.4) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654099891650:ypct=c(0.3, 0.35)
1654099891727:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654099891786:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654099891818:)
1654099891898:cdl <- terra::crop(cdl, y=bbox)
1654099891944:nvc <- terra::crop(nvc, y=bbox)
1654099892140:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654099892188:#cdl[cdl == 61] <- 152
1654099892259:# check if projections of raster tiles are the same. If not, re-project them to match.
1654099892321:if (terra::crs(cdl) != terra::crs(nvc)) {
1654099892359:cdl <- terra::project(x=cdl, y=nvc)
1654099892397:}
1654099892512:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099892577:'aquaculture', 'pasture', 'fallow')
1654099892670:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654099892699:for (habitat_name in habitat_groups) {
1654099892757:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654099892795:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654099892839:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654099892879:grepl(NVC_Name, pattern=habitat_name)) %>%
1654099892914:dplyr::pull(VALUE)
1654099892973:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654099893010:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654099893047:dplyr::pull(VALUE)
1654099893123:if (habitat_name == habitat_groups[[1]]) {
1654099893187:veglayer_copy <- nvc
1654099893226:}
1654099893296:# create binary layer indicating landfire and cdl match
1654099893342:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654099893426:if (verbose == T) {
1654099893471:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654099893502:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654099893530:}
1654099893596:remove <- (!both_orchard) * veglayer_copy
1654099893629:add <- both_orchard * (-cdl)
1654099893663:veglayer_copy <- remove + add
1654099893713:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654099893792:}
1654099894868:# reclassify remaining NVC ag cells to NA
1654099894897:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654099894952:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654099895080:if (verbose == T) {
1654099895134:logger::log_info('Step 1 complete.')
1654099895169:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654099895202:}
1654099895236:##### Step 2: Assign mismatched pixels based on neighborhood
1654099895301:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654099895420:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654099895456:# terra's 'focal' function only accepts one argument
1654099895491:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654099895540:# Is the option to define crop classes working?
1654099895578:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654099895614:window_size=window_size, replace_any=F)
1654099901893:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654099901955:# create extent object that removes the buffer cells
1654099901991:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654099902031:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654099902113:# subtract buffer distance from tile extent
1654099902162:original_extent <- terra::ext(c(
1654099902215:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654099902281:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654099902321:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654099902366:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654099902399:))
1654099902467:# crop tile to original extent (without buffer pixels)
1654099902524:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654099902618:# cropped version of output from step 1
1654099902689:output_step1 <- terra::crop(temp2, original_extent)
1654099902734:# cropped version of CDL
1654099902771:cdl_tomap <- terra::crop(cdl, original_extent)
1654099902836:# cropped version of NVC
1654099902882:nvc_tomap <- terra::crop(nvc, original_extent)
1654099902984:sort(unique(values(nvc_gapsfilled)))
1654099903071:length(which(values(nvc_gapsfilled) == -1001))
1654099903137:plot(nvc_gapsfilled)
1654099903323:plot(nvc_gapsfilled == -1001)
1654099945883:# this script is the non-function version of merge function
1654099945921:library(raster); library(terra); library(dplyr)
1654099945986:##### input parameters
1654099946025:datadir <- './data' # directory where tabular and spatial data are stored
1654099946063:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654099946119:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654099946185:verbose <- T
1654099946228:veglayer <- 'nvc'
1654099946263:##### Step 0: Setup and load data
1654099946346:# load table of LANDFIRE vegetation classes
1654099946379:if (veglayer == 'evt') {
1654099946427:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654099946476:dplyr::mutate(VALUE = as.character(Value))
1654099946509:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654099946538:} else if (veglayer == 'nvc') {
1654099946570:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654099946615:dplyr::mutate(VALUE = as.character(VALUE))
1654099946684:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654099946726:}
1654099947070:# read CDL class names
1654099947142:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654099947186:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654099947230:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654099947291:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654099947330:dplyr::mutate(VALUE = as.character(-VALUE))
1654099947452:# create derived parameter of window_size
1654099947489:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654099947555:##### Step 1: Assign pixels that exactly match
1654099947652:# create vectors listing which CDL classes match LANDFIRE groups
1654099947698:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654099947735:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654099947820:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654099947862:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654099947974:# names of LANDFIRE classes (simplified) that will be re-assigned
1654099948014:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099948051:'aquaculture', 'pasture', 'fallow')
1654099948086:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654099948121:'Aquaculture', 'Pasture', 'Fallow')
1654099948177:# create R objects for each LANDFIRE class listing matching CDL classes
1654099948215:for (i in 1:length(habitat_groups)) {
1654099948268:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654099948309:grepl(NVC_Match2, pattern= search_strings[i])|
1654099948341:grepl(NVC_Match3, pattern= search_strings[i])|
1654099948381:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654099948421:dplyr::pull(CLASS_NAME) )
1654099948459:}
1654099949292:# Load spatial layers (NVC and CDL rasters)
1654099949326:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654099949368:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654099949432:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654099949533:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654099949572:mat <- data.frame(is=NA, becomes=0)
1654099949611:cdl <- terra::classify(cdl, rcl=mat)
1654099951469:##### clip CDL and NVC to smaller area
1654099951503:map <- cdl
1654099951567:# Crop CDL and NVC to small example raster
1654099951602:xpct=c(0.37, 0.4) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654099951638:ypct=c(0.32, 0.34)
1654099951723:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654099951759:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654099951795:)
1654099951866:cdl <- terra::crop(cdl, y=bbox)
1654099951912:nvc <- terra::crop(nvc, y=bbox)
1654099952102:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654099952139:#cdl[cdl == 61] <- 152
1654099952201:# check if projections of raster tiles are the same. If not, re-project them to match.
1654099952241:if (terra::crs(cdl) != terra::crs(nvc)) {
1654099952279:cdl <- terra::project(x=cdl, y=nvc)
1654099952318:}
1654099952439:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654099952473:'aquaculture', 'pasture', 'fallow')
1654099952535:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654099952585:for (habitat_name in habitat_groups) {
1654099952648:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654099952686:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654099952730:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654099952761:grepl(NVC_Name, pattern=habitat_name)) %>%
1654099952806:dplyr::pull(VALUE)
1654099952922:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654099952968:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654099953007:dplyr::pull(VALUE)
1654099953080:if (habitat_name == habitat_groups[[1]]) {
1654099953122:veglayer_copy <- nvc
1654099953173:}
1654099953257:# create binary layer indicating landfire and cdl match
1654099953300:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654099953374:if (verbose == T) {
1654099953415:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654099953476:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654099953518:}
1654099953579:remove <- (!both_orchard) * veglayer_copy
1654099953613:add <- both_orchard * (-cdl)
1654099953649:veglayer_copy <- remove + add
1654099953680:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654099953710:}
1654099954784:# reclassify remaining NVC ag cells to NA
1654099954824:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654099954863:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654099954931:if (verbose == T) {
1654099954971:logger::log_info('Step 1 complete.')
1654099955020:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654099955068:}
1654099955104:##### Step 2: Assign mismatched pixels based on neighborhood
1654099955166:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654099955234:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654099955271:# terra's 'focal' function only accepts one argument
1654099955318:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654099955397:# Is the option to define crop classes working?
1654099955446:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654099955494:window_size=window_size, replace_any=F)
1654099957227:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654099957291:# create extent object that removes the buffer cells
1654099957325:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654099957370:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654099957444:# subtract buffer distance from tile extent
1654099957493:original_extent <- terra::ext(c(
1654099957535:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654099957573:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654099957607:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654099957641:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654099957700:))
1654099957816:# crop tile to original extent (without buffer pixels)
1654099957854:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654099957929:# cropped version of output from step 1
1654099957972:output_step1 <- terra::crop(temp2, original_extent)
1654099958021:# cropped version of CDL
1654099958079:cdl_tomap <- terra::crop(cdl, original_extent)
1654099958163:# cropped version of NVC
1654099958217:nvc_tomap <- terra::crop(nvc, original_extent)
1654099958294:sort(unique(values(nvc_gapsfilled)))
1654099958353:length(which(values(nvc_gapsfilled) == -1001))
1654099958416:plot(nvc_gapsfilled)
1654099958536:plot(nvc_gapsfilled == -1001)
1654100154606:# this script is the non-function version of merge function
1654100154644:library(raster); library(terra); library(dplyr)
1654100154717:##### input parameters
1654100154757:datadir <- './data' # directory where tabular and spatial data are stored
1654100154798:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654100154833:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654100154901:verbose <- T
1654100154939:veglayer <- 'nvc'
1654100154979:##### Step 0: Setup and load data
1654100155067:# load table of LANDFIRE vegetation classes
1654100155099:if (veglayer == 'evt') {
1654100155147:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654100155211:dplyr::mutate(VALUE = as.character(Value))
1654100155287:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654100155342:} else if (veglayer == 'nvc') {
1654100155375:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654100155407:dplyr::mutate(VALUE = as.character(VALUE))
1654100155467:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654100155503:}
1654100155650:# read CDL class names
1654100155682:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654100155717:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654100155752:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654100155812:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654100155845:dplyr::mutate(VALUE = as.character(-VALUE))
1654100155970:# create derived parameter of window_size
1654100156022:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654100156088:##### Step 1: Assign pixels that exactly match
1654100156151:# create vectors listing which CDL classes match LANDFIRE groups
1654100156203:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654100156244:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654100156321:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654100156362:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654100156446:# names of LANDFIRE classes (simplified) that will be re-assigned
1654100156504:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654100156559:'aquaculture', 'pasture', 'fallow')
1654100156594:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654100156635:'Aquaculture', 'Pasture', 'Fallow')
1654100156695:# create R objects for each LANDFIRE class listing matching CDL classes
1654100156730:for (i in 1:length(habitat_groups)) {
1654100156777:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654100156814:grepl(NVC_Match2, pattern= search_strings[i])|
1654100156849:grepl(NVC_Match3, pattern= search_strings[i])|
1654100156887:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654100156926:dplyr::pull(CLASS_NAME) )
1654100156964:}
1654100157807:# Load spatial layers (NVC and CDL rasters)
1654100157848:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654100157887:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654100157989:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654100158132:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654100158179:mat <- data.frame(is=NA, becomes=0)
1654100158230:cdl <- terra::classify(cdl, rcl=mat)
1654100160109:##### clip CDL and NVC to smaller area
1654100160142:map <- cdl
1654100160209:# Crop CDL and NVC to small example raster
1654100160245:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654100160283:ypct=c(0.32, 0.335)
1654100160370:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654100160409:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654100160443:)
1654100160517:cdl <- terra::crop(cdl, y=bbox)
1654100160562:nvc <- terra::crop(nvc, y=bbox)
1654100160723:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654100160753:#cdl[cdl == 61] <- 152
1654100160835:# check if projections of raster tiles are the same. If not, re-project them to match.
1654100160871:if (terra::crs(cdl) != terra::crs(nvc)) {
1654100160920:cdl <- terra::project(x=cdl, y=nvc)
1654100160985:}
1654100161099:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654100161140:'aquaculture', 'pasture', 'fallow')
1654100161212:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654100161269:for (habitat_name in habitat_groups) {
1654100161340:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654100161385:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654100161422:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654100161454:grepl(NVC_Name, pattern=habitat_name)) %>%
1654100161491:dplyr::pull(VALUE)
1654100161576:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654100161627:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654100161665:dplyr::pull(VALUE)
1654100161722:if (habitat_name == habitat_groups[[1]]) {
1654100161759:veglayer_copy <- nvc
1654100161810:}
1654100161891:# create binary layer indicating landfire and cdl match
1654100161928:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654100162002:if (verbose == T) {
1654100162051:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654100162118:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654100162161:}
1654100162230:remove <- (!both_orchard) * veglayer_copy
1654100162270:add <- both_orchard * (-cdl)
1654100162312:veglayer_copy <- remove + add
1654100162356:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654100162411:}
1654100163501:# reclassify remaining NVC ag cells to NA
1654100163537:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654100163576:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654100163635:if (verbose == T) {
1654100163672:logger::log_info('Step 1 complete.')
1654100163735:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654100163778:}
1654100163821:##### Step 2: Assign mismatched pixels based on neighborhood
1654100163882:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654100163942:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654100163976:# terra's 'focal' function only accepts one argument
1654100164027:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654100164096:# Is the option to define crop classes working?
1654100164145:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654100164190:window_size=window_size, replace_any=F)
1654100164813:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654100164877:# create extent object that removes the buffer cells
1654100164913:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654100164947:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654100165005:# subtract buffer distance from tile extent
1654100165061:original_extent <- terra::ext(c(
1654100165103:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654100165141:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654100165177:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654100165215:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654100165248:))
1654100165326:# crop tile to original extent (without buffer pixels)
1654100165389:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654100165465:# cropped version of output from step 1
1654100165502:output_step1 <- terra::crop(temp2, original_extent)
1654100165539:# cropped version of CDL
1654100165583:cdl_tomap <- terra::crop(cdl, original_extent)
1654100165669:# cropped version of NVC
1654100165711:nvc_tomap <- terra::crop(nvc, original_extent)
1654100165781:sort(unique(values(nvc_gapsfilled)))
1654100165849:length(which(values(nvc_gapsfilled) == -1001))
1654100165930:plot(nvc_gapsfilled)
1654100166026:plot(nvc_gapsfilled == -1001)
1654100187246:terra::writeRaster(cdl_tomap, './data/SpatialData/ExampleSmallRasters/small_cdl.tif', overwrite=T)
1654100187408:terra::writeRaster(nvc_tomap, './data/SpatialData/ExampleSmallRasters/small_nvc.tif', overwrite=T)
1654100187539:terra::writeRaster(output_step1, './data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif', overwrite=T)
1654100187675:terra::writeRaster(nvc_gapsfilled, './data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif', overwrite=T)
1654100261145:terra::writeRaster(cdl_tomap, './data/SpatialData/ExampleSmallRasters/small_cdl.tif', overwrite=T)
1654100261259:terra::writeRaster(nvc_tomap, './data/SpatialData/ExampleSmallRasters/small_nvc.tif', overwrite=T)
1654100261352:terra::writeRaster(output_step1, './data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif', overwrite=T)
1654100261433:terra::writeRaster(nvc_gapsfilled, './data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif', overwrite=T)
1654100729965:# this script is the non-function version of merge function
1654100730003:library(raster); library(terra); library(dplyr)
1654100730080:##### input parameters
1654100730122:datadir <- './data' # directory where tabular and spatial data are stored
1654100730166:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654100730221:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654100730264:verbose <- T
1654100730299:veglayer <- 'nvc'
1654100730333:##### Step 0: Setup and load data
1654100730437:# load table of LANDFIRE vegetation classes
1654100730473:if (veglayer == 'evt') {
1654100730549:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654100730596:dplyr::mutate(VALUE = as.character(Value))
1654100730649:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654100730710:} else if (veglayer == 'nvc') {
1654100730753:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654100730795:dplyr::mutate(VALUE = as.character(VALUE))
1654100730852:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654100730896:}
1654100731032:# read CDL class names
1654100731082:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654100731159:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654100731198:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654100731261:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654100731298:dplyr::mutate(VALUE = as.character(-VALUE))
1654100731458:# create derived parameter of window_size
1654100731494:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654100731552:##### Step 1: Assign pixels that exactly match
1654100731620:# create vectors listing which CDL classes match LANDFIRE groups
1654100731663:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654100731702:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654100731811:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654100731849:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654100731926:# names of LANDFIRE classes (simplified) that will be re-assigned
1654100731962:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654100732004:'aquaculture', 'pasture', 'fallow')
1654100732054:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654100732093:'Aquaculture', 'Pasture', 'Fallow')
1654100732167:# create R objects for each LANDFIRE class listing matching CDL classes
1654100732205:for (i in 1:length(habitat_groups)) {
1654100732243:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654100732286:grepl(NVC_Match2, pattern= search_strings[i])|
1654100732341:grepl(NVC_Match3, pattern= search_strings[i])|
1654100732404:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654100732442:dplyr::pull(CLASS_NAME) )
1654100732485:}
1654100733422:# Load spatial layers (NVC and CDL rasters)
1654100733466:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654100733519:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654100733594:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654100733687:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654100733728:mat <- data.frame(is=NA, becomes=0)
1654100733766:cdl <- terra::classify(cdl, rcl=mat)
1654100735628:##### clip CDL and NVC to smaller area
1654100735657:map <- cdl
1654100735714:# Crop CDL and NVC to small example raster
1654100735754:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654100735793:ypct=c(0.32, 0.335)
1654100735916:xpct=c(0.6, 0.9) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654100735955:ypct=c(0.6, 0.9)
1654100736040:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654100736089:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654100736146:)
1654100736232:cdl <- terra::crop(cdl, y=bbox)
1654100736293:nvc <- terra::crop(nvc, y=bbox)
1654100737887:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654100737925:#cdl[cdl == 61] <- 152
1654100738026:# check if projections of raster tiles are the same. If not, re-project them to match.
1654100738067:if (terra::crs(cdl) != terra::crs(nvc)) {
1654100738151:cdl <- terra::project(x=cdl, y=nvc)
1654100738210:}
1654100738809:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654100738846:'aquaculture', 'pasture', 'fallow')
1654100738914:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654100738958:for (habitat_name in habitat_groups) {
1654100739058:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654100739110:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654100739160:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654100739204:grepl(NVC_Name, pattern=habitat_name)) %>%
1654100739243:dplyr::pull(VALUE)
1654100739310:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654100739386:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654100739436:dplyr::pull(VALUE)
1654100739496:if (habitat_name == habitat_groups[[1]]) {
1654100739544:veglayer_copy <- nvc
1654100739582:}
1654100739669:# create binary layer indicating landfire and cdl match
1654100739716:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654100739776:if (verbose == T) {
1654100739817:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654100739863:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654100739910:}
1654100739977:remove <- (!both_orchard) * veglayer_copy
1654100740019:add <- both_orchard * (-cdl)
1654100740060:veglayer_copy <- remove + add
1654100740111:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654100740155:}
1654100744337:# reclassify remaining NVC ag cells to NA
1654100744365:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654100744404:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654100744650:if (verbose == T) {
1654100744687:logger::log_info('Step 1 complete.')
1654100744722:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654100744756:}
1654100744791:##### Step 2: Assign mismatched pixels based on neighborhood
1654100744870:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654100744952:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654100744998:# terra's 'focal' function only accepts one argument
1654100745043:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654100745118:# Is the option to define crop classes working?
1654100745153:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654100745192:window_size=window_size, replace_any=F)
1654100994272:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654100994323:# create extent object that removes the buffer cells
1654100994360:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654100994391:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654100994494:# subtract buffer distance from tile extent
1654100994521:original_extent <- terra::ext(c(
1654100994547:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654100994576:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654100994606:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654100994638:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654100994678:))
1654100994764:# crop tile to original extent (without buffer pixels)
1654100994811:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654100994891:# cropped version of output from step 1
1654100994918:output_step1 <- terra::crop(temp2, original_extent)
1654100994968:# cropped version of CDL
1654100994997:cdl_tomap <- terra::crop(cdl, original_extent)
1654100995106:# cropped version of NVC
1654100995136:nvc_tomap <- terra::crop(nvc, original_extent)
1654100995207:sort(unique(values(nvc_gapsfilled)))
1654100995433:length(which(values(nvc_gapsfilled) == -1001))
1654100995511:plot(nvc_gapsfilled)
1654100996138:plot(nvc_gapsfilled == -1001)
1654101071200:# this script is the non-function version of merge function
1654101071244:library(raster); library(terra); library(dplyr)
1654101071299:##### input parameters
1654101071341:datadir <- './data' # directory where tabular and spatial data are stored
1654101071402:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654101071442:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654101071478:verbose <- T
1654101071514:veglayer <- 'nvc'
1654101071545:##### Step 0: Setup and load data
1654101071653:# load table of LANDFIRE vegetation classes
1654101071708:if (veglayer == 'evt') {
1654101071759:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654101071797:dplyr::mutate(VALUE = as.character(Value))
1654101071834:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654101071877:} else if (veglayer == 'nvc') {
1654101071917:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654101071948:dplyr::mutate(VALUE = as.character(VALUE))
1654101072045:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654101072086:}
1654101072186:# read CDL class names
1654101072220:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654101072261:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654101072308:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654101072431:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654101072461:dplyr::mutate(VALUE = as.character(-VALUE))
1654101072556:# create derived parameter of window_size
1654101072598:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654101072687:##### Step 1: Assign pixels that exactly match
1654101072743:# create vectors listing which CDL classes match LANDFIRE groups
1654101072787:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654101072828:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654101072893:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654101072923:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654101073003:# names of LANDFIRE classes (simplified) that will be re-assigned
1654101073042:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101073077:'aquaculture', 'pasture', 'fallow')
1654101073123:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654101073155:'Aquaculture', 'Pasture', 'Fallow')
1654101073245:# create R objects for each LANDFIRE class listing matching CDL classes
1654101073281:for (i in 1:length(habitat_groups)) {
1654101073310:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654101073354:grepl(NVC_Match2, pattern= search_strings[i])|
1654101073392:grepl(NVC_Match3, pattern= search_strings[i])|
1654101073429:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654101073463:dplyr::pull(CLASS_NAME) )
1654101073531:}
1654101074352:# Load spatial layers (NVC and CDL rasters)
1654101074399:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654101074444:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654101074553:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654101074684:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654101074724:mat <- data.frame(is=NA, becomes=0)
1654101074772:cdl <- terra::classify(cdl, rcl=mat)
1654101076417:##### clip CDL and NVC to smaller area
1654101076444:map <- cdl
1654101076488:# Crop CDL and NVC to small example raster
1654101076516:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101076542:ypct=c(0.32, 0.335)
1654101076605:xpct=c(0.6, 0.75) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101076643:ypct=c(0.8, 0.9)
1654101076731:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654101076764:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654101076789:)
1654101076860:cdl <- terra::crop(cdl, y=bbox)
1654101076898:nvc <- terra::crop(nvc, y=bbox)
1654101077159:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654101077198:#cdl[cdl == 61] <- 152
1654101077269:# check if projections of raster tiles are the same. If not, re-project them to match.
1654101077314:if (terra::crs(cdl) != terra::crs(nvc)) {
1654101077352:cdl <- terra::project(x=cdl, y=nvc)
1654101077391:}
1654101077526:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101077576:'aquaculture', 'pasture', 'fallow')
1654101077644:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654101077684:for (habitat_name in habitat_groups) {
1654101077746:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654101077777:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654101077842:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654101077877:grepl(NVC_Name, pattern=habitat_name)) %>%
1654101077907:dplyr::pull(VALUE)
1654101077958:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654101077996:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654101078034:dplyr::pull(VALUE)
1654101078086:if (habitat_name == habitat_groups[[1]]) {
1654101078138:veglayer_copy <- nvc
1654101078178:}
1654101078246:# create binary layer indicating landfire and cdl match
1654101078280:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654101078350:if (verbose == T) {
1654101078406:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654101078444:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654101078488:}
1654101078570:remove <- (!both_orchard) * veglayer_copy
1654101078615:add <- both_orchard * (-cdl)
1654101078657:veglayer_copy <- remove + add
1654101078696:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654101078738:}
1654101080339:# reclassify remaining NVC ag cells to NA
1654101080387:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654101080441:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654101080540:if (verbose == T) {
1654101080572:logger::log_info('Step 1 complete.')
1654101080603:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654101080635:}
1654101080678:##### Step 2: Assign mismatched pixels based on neighborhood
1654101080742:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654101080817:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654101080856:# terra's 'focal' function only accepts one argument
1654101080908:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654101080992:# Is the option to define crop classes working?
1654101081034:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654101081069:window_size=window_size, replace_any=F)
1654101121962:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654101122054:# create extent object that removes the buffer cells
1654101122096:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654101122145:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654101122239:# subtract buffer distance from tile extent
1654101122282:original_extent <- terra::ext(c(
1654101122330:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654101122373:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654101122422:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654101122461:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654101122510:))
1654101122590:# crop tile to original extent (without buffer pixels)
1654101122630:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654101122711:# cropped version of output from step 1
1654101122755:output_step1 <- terra::crop(temp2, original_extent)
1654101122820:# cropped version of CDL
1654101122863:cdl_tomap <- terra::crop(cdl, original_extent)
1654101122951:# cropped version of NVC
1654101122999:nvc_tomap <- terra::crop(nvc, original_extent)
1654101123080:sort(unique(values(nvc_gapsfilled)))
1654101123183:length(which(values(nvc_gapsfilled) == -1001))
1654101123261:plot(nvc_gapsfilled)
1654101123929:plot(nvc_gapsfilled == -1001)
1654101162911:# this script is the non-function version of merge function
1654101162950:library(raster); library(terra); library(dplyr)
1654101163000:##### input parameters
1654101163069:datadir <- './data' # directory where tabular and spatial data are stored
1654101163128:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654101163180:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654101163214:verbose <- T
1654101163247:veglayer <- 'nvc'
1654101163281:##### Step 0: Setup and load data
1654101163355:# load table of LANDFIRE vegetation classes
1654101163389:if (veglayer == 'evt') {
1654101163441:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654101163491:dplyr::mutate(VALUE = as.character(Value))
1654101163542:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654101163579:} else if (veglayer == 'nvc') {
1654101163619:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654101163649:dplyr::mutate(VALUE = as.character(VALUE))
1654101163707:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654101163737:}
1654101163972:# read CDL class names
1654101164017:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654101164070:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654101164126:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654101164194:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654101164227:dplyr::mutate(VALUE = as.character(-VALUE))
1654101164322:# create derived parameter of window_size
1654101164393:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654101164450:##### Step 1: Assign pixels that exactly match
1654101164520:# create vectors listing which CDL classes match LANDFIRE groups
1654101164571:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654101164610:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654101164700:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654101164760:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654101164822:# names of LANDFIRE classes (simplified) that will be re-assigned
1654101164849:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101164883:'aquaculture', 'pasture', 'fallow')
1654101164916:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654101164964:'Aquaculture', 'Pasture', 'Fallow')
1654101165078:# create R objects for each LANDFIRE class listing matching CDL classes
1654101165116:for (i in 1:length(habitat_groups)) {
1654101165153:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654101165188:grepl(NVC_Match2, pattern= search_strings[i])|
1654101165223:grepl(NVC_Match3, pattern= search_strings[i])|
1654101165262:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654101165307:dplyr::pull(CLASS_NAME) )
1654101165360:}
1654101166140:# Load spatial layers (NVC and CDL rasters)
1654101166170:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654101166198:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654101166253:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654101166348:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654101166401:mat <- data.frame(is=NA, becomes=0)
1654101166440:cdl <- terra::classify(cdl, rcl=mat)
1654101168260:##### clip CDL and NVC to smaller area
1654101168288:map <- cdl
1654101168341:# Crop CDL and NVC to small example raster
1654101168375:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101168410:ypct=c(0.32, 0.335)
1654101168532:xpct=c(0.65, 0.70) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101168565:ypct=c(0.82, 0.87)
1654101168628:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654101168670:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654101168708:)
1654101168801:cdl <- terra::crop(cdl, y=bbox)
1654101168846:nvc <- terra::crop(nvc, y=bbox)
1654101169036:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654101169090:#cdl[cdl == 61] <- 152
1654101169167:# check if projections of raster tiles are the same. If not, re-project them to match.
1654101169205:if (terra::crs(cdl) != terra::crs(nvc)) {
1654101169241:cdl <- terra::project(x=cdl, y=nvc)
1654101169274:}
1654101169406:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101169441:'aquaculture', 'pasture', 'fallow')
1654101169510:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654101169542:for (habitat_name in habitat_groups) {
1654101169604:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654101169634:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654101169669:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654101169721:grepl(NVC_Name, pattern=habitat_name)) %>%
1654101169761:dplyr::pull(VALUE)
1654101169820:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654101169857:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654101169890:dplyr::pull(VALUE)
1654101169980:if (habitat_name == habitat_groups[[1]]) {
1654101170022:veglayer_copy <- nvc
1654101170049:}
1654101170114:# create binary layer indicating landfire and cdl match
1654101170142:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654101170201:if (verbose == T) {
1654101170252:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654101170292:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654101170347:}
1654101170432:remove <- (!both_orchard) * veglayer_copy
1654101170479:add <- both_orchard * (-cdl)
1654101170522:veglayer_copy <- remove + add
1654101170589:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654101170634:}
1654101171754:# reclassify remaining NVC ag cells to NA
1654101171790:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654101171828:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654101171900:if (verbose == T) {
1654101171931:logger::log_info('Step 1 complete.')
1654101171996:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654101172034:}
1654101172077:##### Step 2: Assign mismatched pixels based on neighborhood
1654101172128:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654101172182:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654101172218:# terra's 'focal' function only accepts one argument
1654101172255:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654101172345:# Is the option to define crop classes working?
1654101172386:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654101172423:window_size=window_size, replace_any=F)
1654101178243:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654101178288:# create extent object that removes the buffer cells
1654101178315:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654101178350:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654101178411:# subtract buffer distance from tile extent
1654101178446:original_extent <- terra::ext(c(
1654101178499:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654101178538:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654101178576:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654101178620:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654101178654:))
1654101178714:# crop tile to original extent (without buffer pixels)
1654101178746:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654101178847:# cropped version of output from step 1
1654101178890:output_step1 <- terra::crop(temp2, original_extent)
1654101178934:# cropped version of CDL
1654101178967:cdl_tomap <- terra::crop(cdl, original_extent)
1654101179032:# cropped version of NVC
1654101179073:nvc_tomap <- terra::crop(nvc, original_extent)
1654101179182:sort(unique(values(nvc_gapsfilled)))
1654101179261:length(which(values(nvc_gapsfilled) == -1001))
1654101179315:plot(nvc_gapsfilled)
1654101179514:plot(nvc_gapsfilled == -1001)
1654101229603:# this script is the non-function version of merge function
1654101229636:library(raster); library(terra); library(dplyr)
1654101229686:##### input parameters
1654101229716:datadir <- './data' # directory where tabular and spatial data are stored
1654101229745:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654101229782:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654101229856:verbose <- T
1654101229891:veglayer <- 'nvc'
1654101229924:##### Step 0: Setup and load data
1654101230001:# load table of LANDFIRE vegetation classes
1654101230039:if (veglayer == 'evt') {
1654101230115:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654101230155:dplyr::mutate(VALUE = as.character(Value))
1654101230189:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654101230221:} else if (veglayer == 'nvc') {
1654101230258:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654101230294:dplyr::mutate(VALUE = as.character(VALUE))
1654101230363:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654101230438:}
1654101230662:# read CDL class names
1654101230699:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654101230769:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654101230810:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654101230866:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654101230904:dplyr::mutate(VALUE = as.character(-VALUE))
1654101231000:# create derived parameter of window_size
1654101231033:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654101231104:##### Step 1: Assign pixels that exactly match
1654101231179:# create vectors listing which CDL classes match LANDFIRE groups
1654101231212:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654101231248:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654101231353:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654101231396:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654101231476:# names of LANDFIRE classes (simplified) that will be re-assigned
1654101231503:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101231529:'aquaculture', 'pasture', 'fallow')
1654101231562:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654101231594:'Aquaculture', 'Pasture', 'Fallow')
1654101231685:# create R objects for each LANDFIRE class listing matching CDL classes
1654101231747:for (i in 1:length(habitat_groups)) {
1654101231786:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654101231820:grepl(NVC_Match2, pattern= search_strings[i])|
1654101231854:grepl(NVC_Match3, pattern= search_strings[i])|
1654101231888:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654101231918:dplyr::pull(CLASS_NAME) )
1654101231958:}
1654101232736:# Load spatial layers (NVC and CDL rasters)
1654101232765:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654101232796:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654101232846:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654101232936:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654101232977:mat <- data.frame(is=NA, becomes=0)
1654101233014:cdl <- terra::classify(cdl, rcl=mat)
1654101234491:##### clip CDL and NVC to smaller area
1654101234519:map <- cdl
1654101234571:# Crop CDL and NVC to small example raster
1654101234602:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101234635:ypct=c(0.32, 0.335)
1654101234714:xpct=c(0.67, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101234778:ypct=c(0.84, 0.86)
1654101234848:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654101234885:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654101234915:)
1654101234995:cdl <- terra::crop(cdl, y=bbox)
1654101235043:nvc <- terra::crop(nvc, y=bbox)
1654101235192:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654101235220:#cdl[cdl == 61] <- 152
1654101235318:# check if projections of raster tiles are the same. If not, re-project them to match.
1654101235361:if (terra::crs(cdl) != terra::crs(nvc)) {
1654101235395:cdl <- terra::project(x=cdl, y=nvc)
1654101235433:}
1654101235520:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101235550:'aquaculture', 'pasture', 'fallow')
1654101235650:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654101235686:for (habitat_name in habitat_groups) {
1654101235737:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654101235771:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654101235803:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654101235841:grepl(NVC_Name, pattern=habitat_name)) %>%
1654101235879:dplyr::pull(VALUE)
1654101235970:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654101235999:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654101236031:dplyr::pull(VALUE)
1654101236090:if (habitat_name == habitat_groups[[1]]) {
1654101236123:veglayer_copy <- nvc
1654101236153:}
1654101236253:# create binary layer indicating landfire and cdl match
1654101236291:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654101236353:if (verbose == T) {
1654101236386:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654101236431:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654101236464:}
1654101236565:remove <- (!both_orchard) * veglayer_copy
1654101236606:add <- both_orchard * (-cdl)
1654101236645:veglayer_copy <- remove + add
1654101236687:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654101236726:}
1654101237811:# reclassify remaining NVC ag cells to NA
1654101237846:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654101237885:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654101237958:if (verbose == T) {
1654101237995:logger::log_info('Step 1 complete.')
1654101238045:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654101238087:}
1654101238121:##### Step 2: Assign mismatched pixels based on neighborhood
1654101238176:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654101238231:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654101238283:# terra's 'focal' function only accepts one argument
1654101238338:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654101238417:# Is the option to define crop classes working?
1654101238455:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654101238485:window_size=window_size, replace_any=F)
1654101239539:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654101239606:# create extent object that removes the buffer cells
1654101239639:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654101239669:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654101239719:# subtract buffer distance from tile extent
1654101239766:original_extent <- terra::ext(c(
1654101239818:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654101239858:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654101239909:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654101239946:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654101239981:))
1654101240091:# crop tile to original extent (without buffer pixels)
1654101240145:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654101240218:# cropped version of output from step 1
1654101240258:output_step1 <- terra::crop(temp2, original_extent)
1654101240302:# cropped version of CDL
1654101240338:cdl_tomap <- terra::crop(cdl, original_extent)
1654101240407:# cropped version of NVC
1654101240448:nvc_tomap <- terra::crop(nvc, original_extent)
1654101240516:sort(unique(values(nvc_gapsfilled)))
1654101240584:length(which(values(nvc_gapsfilled) == -1001))
1654101240679:plot(nvc_gapsfilled)
1654101240781:plot(nvc_gapsfilled == -1001)
1654101288253:terra::writeRaster(cdl_tomap, './data/SpatialData/ExampleSmallRasters/small_cdl.tif', overwrite=T)
1654101288407:terra::writeRaster(nvc_tomap, './data/SpatialData/ExampleSmallRasters/small_nvc.tif', overwrite=T)
1654101288554:terra::writeRaster(output_step1, './data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif', overwrite=T)
1654101288714:terra::writeRaster(nvc_gapsfilled, './data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif', overwrite=T)
1654101483258:# this script is the non-function version of merge function
1654101483289:library(raster); library(terra); library(dplyr)
1654101483337:##### input parameters
1654101483368:datadir <- './data' # directory where tabular and spatial data are stored
1654101483399:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654101483431:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654101483465:verbose <- T
1654101483515:veglayer <- 'nvc'
1654101483566:##### Step 0: Setup and load data
1654101483655:# load table of LANDFIRE vegetation classes
1654101483686:if (veglayer == 'evt') {
1654101483718:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654101483755:dplyr::mutate(VALUE = as.character(Value))
1654101483810:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654101483842:} else if (veglayer == 'nvc') {
1654101483879:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654101483917:dplyr::mutate(VALUE = as.character(VALUE))
1654101483968:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654101484002:}
1654101484214:# read CDL class names
1654101484243:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654101484279:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654101484317:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654101484378:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654101484409:dplyr::mutate(VALUE = as.character(-VALUE))
1654101484482:# create derived parameter of window_size
1654101484507:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654101484566:##### Step 1: Assign pixels that exactly match
1654101484666:# create vectors listing which CDL classes match LANDFIRE groups
1654101484698:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654101484732:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654101484793:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654101484832:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654101484898:# names of LANDFIRE classes (simplified) that will be re-assigned
1654101484950:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101484986:'aquaculture', 'pasture', 'fallow')
1654101485016:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654101485048:'Aquaculture', 'Pasture', 'Fallow')
1654101485100:# create R objects for each LANDFIRE class listing matching CDL classes
1654101485130:for (i in 1:length(habitat_groups)) {
1654101485160:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654101485203:grepl(NVC_Match2, pattern= search_strings[i])|
1654101485273:grepl(NVC_Match3, pattern= search_strings[i])|
1654101485305:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654101485348:dplyr::pull(CLASS_NAME) )
1654101485379:}
1654101486208:# Load spatial layers (NVC and CDL rasters)
1654101486244:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654101486279:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654101486323:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654101486406:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654101486456:mat <- data.frame(is=NA, becomes=0)
1654101486506:cdl <- terra::classify(cdl, rcl=mat)
1654101487957:##### clip CDL and NVC to smaller area
1654101487984:map <- cdl
1654101488039:# Crop CDL and NVC to small example raster
1654101488067:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101488096:ypct=c(0.32, 0.335)
1654101488193:xpct=c(0.675, 0.685) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101488251:ypct=c(0.845, 0.855)
1654101488350:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654101488405:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654101488447:)
1654101488523:cdl <- terra::crop(cdl, y=bbox)
1654101488574:nvc <- terra::crop(nvc, y=bbox)
1654101488760:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654101488798:#cdl[cdl == 61] <- 152
1654101488853:# check if projections of raster tiles are the same. If not, re-project them to match.
1654101488885:if (terra::crs(cdl) != terra::crs(nvc)) {
1654101488921:cdl <- terra::project(x=cdl, y=nvc)
1654101488948:}
1654101489102:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101489133:'aquaculture', 'pasture', 'fallow')
1654101489185:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654101489214:for (habitat_name in habitat_groups) {
1654101489270:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654101489305:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654101489338:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654101489380:grepl(NVC_Name, pattern=habitat_name)) %>%
1654101489432:dplyr::pull(VALUE)
1654101489484:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654101489511:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654101489544:dplyr::pull(VALUE)
1654101489595:if (habitat_name == habitat_groups[[1]]) {
1654101489632:veglayer_copy <- nvc
1654101489670:}
1654101489718:# create binary layer indicating landfire and cdl match
1654101489749:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654101489808:if (verbose == T) {
1654101489843:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654101489882:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654101489955:}
1654101490040:remove <- (!both_orchard) * veglayer_copy
1654101490067:add <- both_orchard * (-cdl)
1654101490099:veglayer_copy <- remove + add
1654101490133:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654101490164:}
1654101491159:# reclassify remaining NVC ag cells to NA
1654101491203:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654101491239:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654101491296:if (verbose == T) {
1654101491335:logger::log_info('Step 1 complete.')
1654101491374:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654101491431:}
1654101491467:##### Step 2: Assign mismatched pixels based on neighborhood
1654101491519:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654101491574:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654101491619:# terra's 'focal' function only accepts one argument
1654101491671:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654101491737:# Is the option to define crop classes working?
1654101491769:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654101491810:window_size=window_size, replace_any=F)
1654101492156:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654101492231:# create extent object that removes the buffer cells
1654101492297:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654101492332:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654101492389:# subtract buffer distance from tile extent
1654101492422:original_extent <- terra::ext(c(
1654101492460:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654101492491:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654101492544:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654101492597:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654101492638:))
1654101492702:# crop tile to original extent (without buffer pixels)
1654101492740:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654101492806:# cropped version of output from step 1
1654101492884:output_step1 <- terra::crop(temp2, original_extent)
1654101492921:# cropped version of CDL
1654101492949:cdl_tomap <- terra::crop(cdl, original_extent)
1654101493022:# cropped version of NVC
1654101493058:nvc_tomap <- terra::crop(nvc, original_extent)
1654101493120:sort(unique(values(nvc_gapsfilled)))
1654101493223:length(which(values(nvc_gapsfilled) == -1001))
1654101493330:plot(nvc_gapsfilled)
1654101493410:plot(nvc_gapsfilled == -1001)
1654101517011:# this script is the non-function version of merge function
1654101517040:library(raster); library(terra); library(dplyr)
1654101517087:##### input parameters
1654101517115:datadir <- './data' # directory where tabular and spatial data are stored
1654101517150:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654101517184:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654101517228:verbose <- T
1654101517288:veglayer <- 'nvc'
1654101517320:##### Step 0: Setup and load data
1654101517400:# load table of LANDFIRE vegetation classes
1654101517437:if (veglayer == 'evt') {
1654101517478:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654101517545:dplyr::mutate(VALUE = as.character(Value))
1654101517587:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654101517629:} else if (veglayer == 'nvc') {
1654101517668:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654101517704:dplyr::mutate(VALUE = as.character(VALUE))
1654101517759:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654101517796:}
1654101518045:# read CDL class names
1654101518073:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654101518120:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654101518151:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654101518207:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654101518248:dplyr::mutate(VALUE = as.character(-VALUE))
1654101518347:# create derived parameter of window_size
1654101518407:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654101518459:##### Step 1: Assign pixels that exactly match
1654101518520:# create vectors listing which CDL classes match LANDFIRE groups
1654101518558:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654101518593:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654101518669:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654101518731:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654101518817:# names of LANDFIRE classes (simplified) that will be re-assigned
1654101518848:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101518896:'aquaculture', 'pasture', 'fallow')
1654101518948:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654101518998:'Aquaculture', 'Pasture', 'Fallow')
1654101519079:# create R objects for each LANDFIRE class listing matching CDL classes
1654101519130:for (i in 1:length(habitat_groups)) {
1654101519181:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654101519239:grepl(NVC_Match2, pattern= search_strings[i])|
1654101519293:grepl(NVC_Match3, pattern= search_strings[i])|
1654101519334:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654101519379:dplyr::pull(CLASS_NAME) )
1654101519410:}
1654101520421:# Load spatial layers (NVC and CDL rasters)
1654101520460:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654101520498:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654101520558:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654101520691:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654101520734:mat <- data.frame(is=NA, becomes=0)
1654101520772:cdl <- terra::classify(cdl, rcl=mat)
1654101522354:##### clip CDL and NVC to smaller area
1654101522391:map <- cdl
1654101522445:# Crop CDL and NVC to small example raster
1654101522481:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101522511:ypct=c(0.32, 0.335)
1654101522590:xpct=c(0.675, 0.685) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101522649:ypct=c(0.85, 0.86)
1654101522703:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654101522745:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654101522779:)
1654101522851:cdl <- terra::crop(cdl, y=bbox)
1654101522896:nvc <- terra::crop(nvc, y=bbox)
1654101523019:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654101523051:#cdl[cdl == 61] <- 152
1654101523120:# check if projections of raster tiles are the same. If not, re-project them to match.
1654101523178:if (terra::crs(cdl) != terra::crs(nvc)) {
1654101523212:cdl <- terra::project(x=cdl, y=nvc)
1654101523252:}
1654101523355:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101523400:'aquaculture', 'pasture', 'fallow')
1654101523459:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654101523495:for (habitat_name in habitat_groups) {
1654101523550:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654101523593:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654101523623:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654101523664:grepl(NVC_Name, pattern=habitat_name)) %>%
1654101523731:dplyr::pull(VALUE)
1654101523799:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654101523836:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654101523875:dplyr::pull(VALUE)
1654101523936:if (habitat_name == habitat_groups[[1]]) {
1654101523974:veglayer_copy <- nvc
1654101524036:}
1654101524113:# create binary layer indicating landfire and cdl match
1654101524150:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654101524215:if (verbose == T) {
1654101524244:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654101524280:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654101524342:}
1654101524421:remove <- (!both_orchard) * veglayer_copy
1654101524472:add <- both_orchard * (-cdl)
1654101524507:veglayer_copy <- remove + add
1654101524547:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654101524584:}
1654101525906:# reclassify remaining NVC ag cells to NA
1654101525944:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654101525980:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654101526089:if (verbose == T) {
1654101526139:logger::log_info('Step 1 complete.')
1654101526181:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654101526223:}
1654101526260:##### Step 2: Assign mismatched pixels based on neighborhood
1654101526318:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654101526415:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654101526471:# terra's 'focal' function only accepts one argument
1654101526516:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654101526581:# Is the option to define crop classes working?
1654101526615:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654101526658:window_size=window_size, replace_any=F)
1654101527020:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654101527108:# create extent object that removes the buffer cells
1654101527146:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654101527179:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654101527250:# subtract buffer distance from tile extent
1654101527295:original_extent <- terra::ext(c(
1654101527355:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654101527394:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654101527438:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654101527474:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654101527519:))
1654101527609:# crop tile to original extent (without buffer pixels)
1654101527654:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654101527725:# cropped version of output from step 1
1654101527765:output_step1 <- terra::crop(temp2, original_extent)
1654101527808:# cropped version of CDL
1654101527843:cdl_tomap <- terra::crop(cdl, original_extent)
1654101527968:# cropped version of NVC
1654101528006:nvc_tomap <- terra::crop(nvc, original_extent)
1654101528077:sort(unique(values(nvc_gapsfilled)))
1654101528149:length(which(values(nvc_gapsfilled) == -1001))
1654101528230:plot(nvc_gapsfilled)
1654101528316:plot(nvc_gapsfilled == -1001)
1654101544056:# this script is the non-function version of merge function
1654101544090:library(raster); library(terra); library(dplyr)
1654101544145:##### input parameters
1654101544175:datadir <- './data' # directory where tabular and spatial data are stored
1654101544212:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654101544260:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654101544293:verbose <- T
1654101544327:veglayer <- 'nvc'
1654101544362:##### Step 0: Setup and load data
1654101544438:# load table of LANDFIRE vegetation classes
1654101544483:if (veglayer == 'evt') {
1654101544528:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654101544563:dplyr::mutate(VALUE = as.character(Value))
1654101544606:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654101544644:} else if (veglayer == 'nvc') {
1654101544681:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654101544719:dplyr::mutate(VALUE = as.character(VALUE))
1654101544816:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654101544914:}
1654101545132:# read CDL class names
1654101545168:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654101545230:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654101545294:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654101545339:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654101545374:dplyr::mutate(VALUE = as.character(-VALUE))
1654101545473:# create derived parameter of window_size
1654101545521:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654101545578:##### Step 1: Assign pixels that exactly match
1654101545636:# create vectors listing which CDL classes match LANDFIRE groups
1654101545675:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654101545718:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654101545798:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654101545841:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654101545937:# names of LANDFIRE classes (simplified) that will be re-assigned
1654101545972:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101546011:'aquaculture', 'pasture', 'fallow')
1654101546046:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654101546092:'Aquaculture', 'Pasture', 'Fallow')
1654101546208:# create R objects for each LANDFIRE class listing matching CDL classes
1654101546246:for (i in 1:length(habitat_groups)) {
1654101546283:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654101546318:grepl(NVC_Match2, pattern= search_strings[i])|
1654101546354:grepl(NVC_Match3, pattern= search_strings[i])|
1654101546387:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654101546415:dplyr::pull(CLASS_NAME) )
1654101546447:}
1654101547291:# Load spatial layers (NVC and CDL rasters)
1654101547319:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654101547353:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654101547412:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654101547508:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654101547540:mat <- data.frame(is=NA, becomes=0)
1654101547573:cdl <- terra::classify(cdl, rcl=mat)
1654101549068:##### clip CDL and NVC to smaller area
1654101549094:map <- cdl
1654101549162:# Crop CDL and NVC to small example raster
1654101549195:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101549249:ypct=c(0.32, 0.335)
1654101549331:xpct=c(0.68, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101549424:ypct=c(0.845, 0.855)
1654101549480:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654101549514:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654101549579:)
1654101549648:cdl <- terra::crop(cdl, y=bbox)
1654101549688:nvc <- terra::crop(nvc, y=bbox)
1654101549809:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654101549888:#cdl[cdl == 61] <- 152
1654101549948:# check if projections of raster tiles are the same. If not, re-project them to match.
1654101549995:if (terra::crs(cdl) != terra::crs(nvc)) {
1654101550032:cdl <- terra::project(x=cdl, y=nvc)
1654101550091:}
1654101550207:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101550251:'aquaculture', 'pasture', 'fallow')
1654101550326:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654101550383:for (habitat_name in habitat_groups) {
1654101550463:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654101550498:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654101550541:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654101550576:grepl(NVC_Name, pattern=habitat_name)) %>%
1654101550607:dplyr::pull(VALUE)
1654101550694:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654101550736:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654101550774:dplyr::pull(VALUE)
1654101550836:if (habitat_name == habitat_groups[[1]]) {
1654101550868:veglayer_copy <- nvc
1654101550904:}
1654101550983:# create binary layer indicating landfire and cdl match
1654101551020:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654101551077:if (verbose == T) {
1654101551114:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654101551152:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654101551192:}
1654101551251:remove <- (!both_orchard) * veglayer_copy
1654101551295:add <- both_orchard * (-cdl)
1654101551332:veglayer_copy <- remove + add
1654101551366:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654101551398:}
1654101552318:# reclassify remaining NVC ag cells to NA
1654101552355:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654101552392:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654101552461:if (verbose == T) {
1654101552494:logger::log_info('Step 1 complete.')
1654101552545:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654101552587:}
1654101552624:##### Step 2: Assign mismatched pixels based on neighborhood
1654101552683:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654101552752:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654101552792:# terra's 'focal' function only accepts one argument
1654101552849:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654101552910:# Is the option to define crop classes working?
1654101552941:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654101552984:window_size=window_size, replace_any=F)
1654101553366:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654101553433:# create extent object that removes the buffer cells
1654101553461:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654101553497:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654101553553:# subtract buffer distance from tile extent
1654101553590:original_extent <- terra::ext(c(
1654101553629:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654101553693:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654101553741:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654101553774:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654101553809:))
1654101553872:# crop tile to original extent (without buffer pixels)
1654101553928:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654101553991:# cropped version of output from step 1
1654101554033:output_step1 <- terra::crop(temp2, original_extent)
1654101554084:# cropped version of CDL
1654101554133:cdl_tomap <- terra::crop(cdl, original_extent)
1654101554229:# cropped version of NVC
1654101554267:nvc_tomap <- terra::crop(nvc, original_extent)
1654101554319:sort(unique(values(nvc_gapsfilled)))
1654101554378:length(which(values(nvc_gapsfilled) == -1001))
1654101554450:plot(nvc_gapsfilled)
1654101554534:plot(nvc_gapsfilled == -1001)
1654101571578:terra::writeRaster(cdl_tomap, './data/SpatialData/ExampleSmallRasters/small_cdl.tif', overwrite=T)
1654101571710:terra::writeRaster(nvc_tomap, './data/SpatialData/ExampleSmallRasters/small_nvc.tif', overwrite=T)
1654101571814:terra::writeRaster(output_step1, './data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif', overwrite=T)
1654101571929:terra::writeRaster(nvc_gapsfilled, './data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif', overwrite=T)
1654101654120:# this script is the non-function version of merge function
1654101654157:library(raster); library(terra); library(dplyr)
1654101654251:##### input parameters
1654101654311:datadir <- './data' # directory where tabular and spatial data are stored
1654101654348:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654101654380:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654101654413:verbose <- T
1654101654454:veglayer <- 'nvc'
1654101654507:##### Step 0: Setup and load data
1654101654637:# load table of LANDFIRE vegetation classes
1654101654669:if (veglayer == 'evt') {
1654101654702:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654101654747:dplyr::mutate(VALUE = as.character(Value))
1654101654780:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654101654818:} else if (veglayer == 'nvc') {
1654101654868:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654101654916:dplyr::mutate(VALUE = as.character(VALUE))
1654101654979:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654101655018:}
1654101655279:# read CDL class names
1654101655319:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654101655363:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654101655403:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654101655502:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654101655549:dplyr::mutate(VALUE = as.character(-VALUE))
1654101655682:# create derived parameter of window_size
1654101655727:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654101655784:##### Step 1: Assign pixels that exactly match
1654101655850:# create vectors listing which CDL classes match LANDFIRE groups
1654101655892:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654101655931:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654101656011:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654101656062:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654101656131:# names of LANDFIRE classes (simplified) that will be re-assigned
1654101656163:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101656223:'aquaculture', 'pasture', 'fallow')
1654101656271:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654101656316:'Aquaculture', 'Pasture', 'Fallow')
1654101656395:# create R objects for each LANDFIRE class listing matching CDL classes
1654101656441:for (i in 1:length(habitat_groups)) {
1654101656485:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654101656540:grepl(NVC_Match2, pattern= search_strings[i])|
1654101656576:grepl(NVC_Match3, pattern= search_strings[i])|
1654101656611:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654101656657:dplyr::pull(CLASS_NAME) )
1654101656696:}
1654101657510:# Load spatial layers (NVC and CDL rasters)
1654101657546:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654101657581:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654101657643:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654101657759:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654101657788:mat <- data.frame(is=NA, becomes=0)
1654101657830:cdl <- terra::classify(cdl, rcl=mat)
1654101659366:##### clip CDL and NVC to smaller area
1654101659393:map <- cdl
1654101659439:# Crop CDL and NVC to small example raster
1654101659475:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101659511:ypct=c(0.32, 0.335)
1654101659620:xpct=c(0.675, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101659653:ypct=c(0.8, 0.865)
1654101659715:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654101659752:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654101659786:)
1654101659861:cdl <- terra::crop(cdl, y=bbox)
1654101659924:nvc <- terra::crop(nvc, y=bbox)
1654101660154:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654101660221:#cdl[cdl == 61] <- 152
1654101660285:# check if projections of raster tiles are the same. If not, re-project them to match.
1654101660320:if (terra::crs(cdl) != terra::crs(nvc)) {
1654101660374:cdl <- terra::project(x=cdl, y=nvc)
1654101660406:}
1654101660550:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101660587:'aquaculture', 'pasture', 'fallow')
1654101660643:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654101660686:for (habitat_name in habitat_groups) {
1654101660745:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654101660778:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654101660807:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654101660868:grepl(NVC_Name, pattern=habitat_name)) %>%
1654101660903:dplyr::pull(VALUE)
1654101660961:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654101661000:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654101661039:dplyr::pull(VALUE)
1654101661089:if (habitat_name == habitat_groups[[1]]) {
1654101661122:veglayer_copy <- nvc
1654101661171:}
1654101661250:# create binary layer indicating landfire and cdl match
1654101661286:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654101661364:if (verbose == T) {
1654101661401:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654101661456:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654101661502:}
1654101661572:remove <- (!both_orchard) * veglayer_copy
1654101661598:add <- both_orchard * (-cdl)
1654101661627:veglayer_copy <- remove + add
1654101661666:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654101661701:}
1654101662673:# reclassify remaining NVC ag cells to NA
1654101662703:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654101662746:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654101662815:if (verbose == T) {
1654101662852:logger::log_info('Step 1 complete.')
1654101662884:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654101662949:}
1654101662985:##### Step 2: Assign mismatched pixels based on neighborhood
1654101663049:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654101663117:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654101663165:# terra's 'focal' function only accepts one argument
1654101663292:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654101663364:# Is the option to define crop classes working?
1654101663401:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654101663443:window_size=window_size, replace_any=F)
1654101665797:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654101665852:# create extent object that removes the buffer cells
1654101665887:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654101665926:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654101666005:# subtract buffer distance from tile extent
1654101666067:original_extent <- terra::ext(c(
1654101666101:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654101666136:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654101666176:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654101666217:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654101666255:))
1654101666386:# crop tile to original extent (without buffer pixels)
1654101666420:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654101666551:# cropped version of output from step 1
1654101666584:output_step1 <- terra::crop(temp2, original_extent)
1654101666678:# cropped version of CDL
1654101666732:cdl_tomap <- terra::crop(cdl, original_extent)
1654101666791:# cropped version of NVC
1654101666837:nvc_tomap <- terra::crop(nvc, original_extent)
1654101666892:sort(unique(values(nvc_gapsfilled)))
1654101666989:length(which(values(nvc_gapsfilled) == -1001))
1654101667077:plot(nvc_gapsfilled)
1654101667220:plot(nvc_gapsfilled == -1001)
1654101712967:# this script is the non-function version of merge function
1654101713007:library(raster); library(terra); library(dplyr)
1654101713054:##### input parameters
1654101713087:datadir <- './data' # directory where tabular and spatial data are stored
1654101713118:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654101713150:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654101713189:verbose <- T
1654101713231:veglayer <- 'nvc'
1654101713291:##### Step 0: Setup and load data
1654101713388:# load table of LANDFIRE vegetation classes
1654101713424:if (veglayer == 'evt') {
1654101713463:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654101713503:dplyr::mutate(VALUE = as.character(Value))
1654101713546:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654101713593:} else if (veglayer == 'nvc') {
1654101713624:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654101713662:dplyr::mutate(VALUE = as.character(VALUE))
1654101713725:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654101713770:}
1654101714010:# read CDL class names
1654101714042:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654101714098:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654101714142:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654101714199:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654101714234:dplyr::mutate(VALUE = as.character(-VALUE))
1654101714333:# create derived parameter of window_size
1654101714383:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654101714457:##### Step 1: Assign pixels that exactly match
1654101714504:# create vectors listing which CDL classes match LANDFIRE groups
1654101714534:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654101714565:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654101714634:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654101714719:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654101714802:# names of LANDFIRE classes (simplified) that will be re-assigned
1654101714834:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101714874:'aquaculture', 'pasture', 'fallow')
1654101714912:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654101714975:'Aquaculture', 'Pasture', 'Fallow')
1654101715062:# create R objects for each LANDFIRE class listing matching CDL classes
1654101715105:for (i in 1:length(habitat_groups)) {
1654101715140:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654101715174:grepl(NVC_Match2, pattern= search_strings[i])|
1654101715206:grepl(NVC_Match3, pattern= search_strings[i])|
1654101715256:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654101715314:dplyr::pull(CLASS_NAME) )
1654101715351:}
1654101716156:# Load spatial layers (NVC and CDL rasters)
1654101716194:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654101716224:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654101716280:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654101716366:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654101716417:mat <- data.frame(is=NA, becomes=0)
1654101716453:cdl <- terra::classify(cdl, rcl=mat)
1654101717960:##### clip CDL and NVC to smaller area
1654101717987:map <- cdl
1654101718032:# Crop CDL and NVC to small example raster
1654101718058:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101718095:ypct=c(0.32, 0.335)
1654101718170:xpct=c(0.675, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101718214:ypct=c(0.85, 0.87)
1654101718303:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654101718337:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654101718373:)
1654101718441:cdl <- terra::crop(cdl, y=bbox)
1654101718480:nvc <- terra::crop(nvc, y=bbox)
1654101718598:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654101718633:#cdl[cdl == 61] <- 152
1654101718691:# check if projections of raster tiles are the same. If not, re-project them to match.
1654101718731:if (terra::crs(cdl) != terra::crs(nvc)) {
1654101718787:cdl <- terra::project(x=cdl, y=nvc)
1654101718833:}
1654101718905:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101718933:'aquaculture', 'pasture', 'fallow')
1654101718979:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654101719024:for (habitat_name in habitat_groups) {
1654101719114:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654101719157:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654101719184:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654101719220:grepl(NVC_Name, pattern=habitat_name)) %>%
1654101719254:dplyr::pull(VALUE)
1654101719304:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654101719337:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654101719379:dplyr::pull(VALUE)
1654101719446:if (habitat_name == habitat_groups[[1]]) {
1654101719479:veglayer_copy <- nvc
1654101719506:}
1654101719570:# create binary layer indicating landfire and cdl match
1654101719604:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654101719685:if (verbose == T) {
1654101719736:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654101719768:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654101719822:}
1654101719909:remove <- (!both_orchard) * veglayer_copy
1654101719952:add <- both_orchard * (-cdl)
1654101720004:veglayer_copy <- remove + add
1654101720061:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654101720105:}
1654101721100:# reclassify remaining NVC ag cells to NA
1654101721132:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654101721179:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654101721241:if (verbose == T) {
1654101721271:logger::log_info('Step 1 complete.')
1654101721298:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654101721376:}
1654101721424:##### Step 2: Assign mismatched pixels based on neighborhood
1654101721484:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654101721542:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654101721573:# terra's 'focal' function only accepts one argument
1654101721615:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654101721703:# Is the option to define crop classes working?
1654101721739:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654101721787:window_size=window_size, replace_any=F)
1654101722510:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654101722568:# create extent object that removes the buffer cells
1654101722603:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654101722649:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654101722719:# subtract buffer distance from tile extent
1654101722763:original_extent <- terra::ext(c(
1654101722804:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654101722842:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654101722885:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654101722922:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654101722955:))
1654101723091:# crop tile to original extent (without buffer pixels)
1654101723127:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654101723195:# cropped version of output from step 1
1654101723229:output_step1 <- terra::crop(temp2, original_extent)
1654101723277:# cropped version of CDL
1654101723320:cdl_tomap <- terra::crop(cdl, original_extent)
1654101723455:# cropped version of NVC
1654101723486:nvc_tomap <- terra::crop(nvc, original_extent)
1654101723543:sort(unique(values(nvc_gapsfilled)))
1654101723615:length(which(values(nvc_gapsfilled) == -1001))
1654101723674:plot(nvc_gapsfilled)
1654101723784:plot(nvc_gapsfilled == -1001)
1654101754191:# this script is the non-function version of merge function
1654101754221:library(raster); library(terra); library(dplyr)
1654101754272:##### input parameters
1654101754302:datadir <- './data' # directory where tabular and spatial data are stored
1654101754332:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654101754367:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654101754413:verbose <- T
1654101754469:veglayer <- 'nvc'
1654101754505:##### Step 0: Setup and load data
1654101754581:# load table of LANDFIRE vegetation classes
1654101754617:if (veglayer == 'evt') {
1654101754648:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654101754693:dplyr::mutate(VALUE = as.character(Value))
1654101754800:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654101754855:} else if (veglayer == 'nvc') {
1654101754909:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654101754960:dplyr::mutate(VALUE = as.character(VALUE))
1654101755009:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654101755040:}
1654101755273:# read CDL class names
1654101755304:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654101755333:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654101755367:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654101755433:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654101755492:dplyr::mutate(VALUE = as.character(-VALUE))
1654101755606:# create derived parameter of window_size
1654101755648:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654101755710:##### Step 1: Assign pixels that exactly match
1654101755805:# create vectors listing which CDL classes match LANDFIRE groups
1654101755855:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654101755892:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654101755991:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654101756025:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654101756123:# names of LANDFIRE classes (simplified) that will be re-assigned
1654101756162:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101756195:'aquaculture', 'pasture', 'fallow')
1654101756234:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654101756283:'Aquaculture', 'Pasture', 'Fallow')
1654101756346:# create R objects for each LANDFIRE class listing matching CDL classes
1654101756394:for (i in 1:length(habitat_groups)) {
1654101756458:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654101756489:grepl(NVC_Match2, pattern= search_strings[i])|
1654101756516:grepl(NVC_Match3, pattern= search_strings[i])|
1654101756557:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654101756596:dplyr::pull(CLASS_NAME) )
1654101756624:}
1654101757446:# Load spatial layers (NVC and CDL rasters)
1654101757477:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654101757503:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654101757554:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654101757633:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654101757681:mat <- data.frame(is=NA, becomes=0)
1654101757720:cdl <- terra::classify(cdl, rcl=mat)
1654101759259:##### clip CDL and NVC to smaller area
1654101759289:map <- cdl
1654101759348:# Crop CDL and NVC to small example raster
1654101759385:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101759421:ypct=c(0.32, 0.335)
1654101759521:xpct=c(0.675, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101759563:ypct=c(0.847, 0.862)
1654101759624:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654101759658:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654101759689:)
1654101759768:cdl <- terra::crop(cdl, y=bbox)
1654101759823:nvc <- terra::crop(nvc, y=bbox)
1654101759938:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654101759970:#cdl[cdl == 61] <- 152
1654101760055:# check if projections of raster tiles are the same. If not, re-project them to match.
1654101760087:if (terra::crs(cdl) != terra::crs(nvc)) {
1654101760119:cdl <- terra::project(x=cdl, y=nvc)
1654101760152:}
1654101760250:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101760285:'aquaculture', 'pasture', 'fallow')
1654101760392:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654101760424:for (habitat_name in habitat_groups) {
1654101760486:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654101760519:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654101760567:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654101760606:grepl(NVC_Name, pattern=habitat_name)) %>%
1654101760660:dplyr::pull(VALUE)
1654101760736:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654101760773:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654101760809:dplyr::pull(VALUE)
1654101760882:if (habitat_name == habitat_groups[[1]]) {
1654101760939:veglayer_copy <- nvc
1654101760977:}
1654101761046:# create binary layer indicating landfire and cdl match
1654101761086:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654101761143:if (verbose == T) {
1654101761184:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654101761264:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654101761313:}
1654101761381:remove <- (!both_orchard) * veglayer_copy
1654101761422:add <- both_orchard * (-cdl)
1654101761475:veglayer_copy <- remove + add
1654101761559:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654101761606:}
1654101762569:# reclassify remaining NVC ag cells to NA
1654101762618:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654101762651:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654101762718:if (verbose == T) {
1654101762757:logger::log_info('Step 1 complete.')
1654101762807:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654101762869:}
1654101762917:##### Step 2: Assign mismatched pixels based on neighborhood
1654101762984:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654101763057:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654101763117:# terra's 'focal' function only accepts one argument
1654101763167:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654101763229:# Is the option to define crop classes working?
1654101763266:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654101763301:window_size=window_size, replace_any=F)
1654101763877:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654101763933:# create extent object that removes the buffer cells
1654101763980:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654101764016:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654101764074:# subtract buffer distance from tile extent
1654101764127:original_extent <- terra::ext(c(
1654101764163:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654101764203:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654101764249:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654101764290:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654101764326:))
1654101764409:# crop tile to original extent (without buffer pixels)
1654101764457:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654101764516:# cropped version of output from step 1
1654101764545:output_step1 <- terra::crop(temp2, original_extent)
1654101764581:# cropped version of CDL
1654101764625:cdl_tomap <- terra::crop(cdl, original_extent)
1654101764704:# cropped version of NVC
1654101764741:nvc_tomap <- terra::crop(nvc, original_extent)
1654101764984:sort(unique(values(nvc_gapsfilled)))
1654101765047:length(which(values(nvc_gapsfilled) == -1001))
1654101765117:plot(nvc_gapsfilled)
1654101765202:plot(nvc_gapsfilled == -1001)
1654101779846:terra::writeRaster(cdl_tomap, './data/SpatialData/ExampleSmallRasters/small_cdl.tif', overwrite=T)
1654101779985:terra::writeRaster(nvc_tomap, './data/SpatialData/ExampleSmallRasters/small_nvc.tif', overwrite=T)
1654101780161:terra::writeRaster(output_step1, './data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif', overwrite=T)
1654101780306:terra::writeRaster(nvc_gapsfilled, './data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif', overwrite=T)
1654101848206:# this script is the non-function version of merge function
1654101848251:library(raster); library(terra); library(dplyr)
1654101848313:##### input parameters
1654101848343:datadir <- './data' # directory where tabular and spatial data are stored
1654101848375:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654101848414:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654101848444:verbose <- T
1654101848502:veglayer <- 'nvc'
1654101848539:##### Step 0: Setup and load data
1654101848616:# load table of LANDFIRE vegetation classes
1654101848650:if (veglayer == 'evt') {
1654101848688:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654101848730:dplyr::mutate(VALUE = as.character(Value))
1654101848763:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654101848817:} else if (veglayer == 'nvc') {
1654101848849:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654101848883:dplyr::mutate(VALUE = as.character(VALUE))
1654101848941:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654101848979:}
1654101849111:# read CDL class names
1654101849152:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654101849179:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654101849209:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654101849262:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654101849302:dplyr::mutate(VALUE = as.character(-VALUE))
1654101849435:# create derived parameter of window_size
1654101849472:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654101849529:##### Step 1: Assign pixels that exactly match
1654101849595:# create vectors listing which CDL classes match LANDFIRE groups
1654101849622:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654101849654:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654101849770:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654101849810:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654101849893:# names of LANDFIRE classes (simplified) that will be re-assigned
1654101849945:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101849975:'aquaculture', 'pasture', 'fallow')
1654101850010:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654101850065:'Aquaculture', 'Pasture', 'Fallow')
1654101850139:# create R objects for each LANDFIRE class listing matching CDL classes
1654101850179:for (i in 1:length(habitat_groups)) {
1654101850209:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654101850241:grepl(NVC_Match2, pattern= search_strings[i])|
1654101850286:grepl(NVC_Match3, pattern= search_strings[i])|
1654101850326:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654101850367:dplyr::pull(CLASS_NAME) )
1654101850408:}
1654101851154:# Load spatial layers (NVC and CDL rasters)
1654101851182:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654101851213:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654101851281:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654101851403:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654101851442:mat <- data.frame(is=NA, becomes=0)
1654101851480:cdl <- terra::classify(cdl, rcl=mat)
1654101853354:##### clip CDL and NVC to smaller area
1654101853395:map <- cdl
1654101853475:# Crop CDL and NVC to small example raster
1654101853520:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101853583:ypct=c(0.32, 0.335)
1654101853702:xpct=c(0.675, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654101853744:ypct=c(0.845, 0.86)
1654101853811:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654101853851:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654101853892:)
1654101853966:cdl <- terra::crop(cdl, y=bbox)
1654101854007:nvc <- terra::crop(nvc, y=bbox)
1654101854181:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654101854219:#cdl[cdl == 61] <- 152
1654101854286:# check if projections of raster tiles are the same. If not, re-project them to match.
1654101854334:if (terra::crs(cdl) != terra::crs(nvc)) {
1654101854378:cdl <- terra::project(x=cdl, y=nvc)
1654101854424:}
1654101854536:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654101854573:'aquaculture', 'pasture', 'fallow')
1654101854639:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654101854678:for (habitat_name in habitat_groups) {
1654101854795:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654101854845:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654101854913:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654101854974:grepl(NVC_Name, pattern=habitat_name)) %>%
1654101855017:dplyr::pull(VALUE)
1654101855095:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654101855127:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654101855160:dplyr::pull(VALUE)
1654101855219:if (habitat_name == habitat_groups[[1]]) {
1654101855291:veglayer_copy <- nvc
1654101855330:}
1654101855399:# create binary layer indicating landfire and cdl match
1654101855442:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654101855523:if (verbose == T) {
1654101855578:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654101855632:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654101855676:}
1654101855752:remove <- (!both_orchard) * veglayer_copy
1654101855795:add <- both_orchard * (-cdl)
1654101855856:veglayer_copy <- remove + add
1654101855898:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654101855948:}
1654101857354:# reclassify remaining NVC ag cells to NA
1654101857383:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654101857448:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654101857525:if (verbose == T) {
1654101857566:logger::log_info('Step 1 complete.')
1654101857610:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654101857651:}
1654101857694:##### Step 2: Assign mismatched pixels based on neighborhood
1654101857766:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654101857835:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654101857871:# terra's 'focal' function only accepts one argument
1654101857907:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654101857984:# Is the option to define crop classes working?
1654101858048:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654101858092:window_size=window_size, replace_any=F)
1654101858713:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654101858776:# create extent object that removes the buffer cells
1654101858834:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654101858873:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654101858941:# subtract buffer distance from tile extent
1654101858981:original_extent <- terra::ext(c(
1654101859024:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654101859065:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654101859126:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654101859186:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654101859226:))
1654101859300:# crop tile to original extent (without buffer pixels)
1654101859341:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654101859457:# cropped version of output from step 1
1654101859502:output_step1 <- terra::crop(temp2, original_extent)
1654101859545:# cropped version of CDL
1654101859592:cdl_tomap <- terra::crop(cdl, original_extent)
1654101859667:# cropped version of NVC
1654101859712:nvc_tomap <- terra::crop(nvc, original_extent)
1654101859821:sort(unique(values(nvc_gapsfilled)))
1654101859892:length(which(values(nvc_gapsfilled) == -1001))
1654101859963:plot(nvc_gapsfilled)
1654101860088:plot(nvc_gapsfilled == -1001)
1654101860365:terra::writeRaster(cdl_tomap, './data/SpatialData/ExampleSmallRasters/small_cdl.tif', overwrite=T)
1654101860601:terra::writeRaster(nvc_tomap, './data/SpatialData/ExampleSmallRasters/small_nvc.tif', overwrite=T)
1654101860724:terra::writeRaster(output_step1, './data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif', overwrite=T)
1654101860833:terra::writeRaster(nvc_gapsfilled, './data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif', overwrite=T)
1654102014618:# this script is the non-function version of merge function
1654102014648:library(raster); library(terra); library(dplyr)
1654102014699:##### input parameters
1654102014728:datadir <- './data' # directory where tabular and spatial data are stored
1654102014774:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654102014842:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654102014874:verbose <- T
1654102014906:veglayer <- 'nvc'
1654102014934:##### Step 0: Setup and load data
1654102015006:# load table of LANDFIRE vegetation classes
1654102015034:if (veglayer == 'evt') {
1654102015085:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654102015137:dplyr::mutate(VALUE = as.character(Value))
1654102015174:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654102015206:} else if (veglayer == 'nvc') {
1654102015236:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654102015267:dplyr::mutate(VALUE = as.character(VALUE))
1654102015322:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654102015397:}
1654102015473:# read CDL class names
1654102015501:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654102015529:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654102015562:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654102015616:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654102015659:dplyr::mutate(VALUE = as.character(-VALUE))
1654102015747:# create derived parameter of window_size
1654102015787:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654102015850:##### Step 1: Assign pixels that exactly match
1654102015941:# create vectors listing which CDL classes match LANDFIRE groups
1654102015977:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654102016007:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654102016062:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654102016094:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654102016170:# names of LANDFIRE classes (simplified) that will be re-assigned
1654102016206:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654102016265:'aquaculture', 'pasture', 'fallow')
1654102016295:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654102016320:'Aquaculture', 'Pasture', 'Fallow')
1654102016369:# create R objects for each LANDFIRE class listing matching CDL classes
1654102016401:for (i in 1:length(habitat_groups)) {
1654102016428:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654102016468:grepl(NVC_Match2, pattern= search_strings[i])|
1654102016534:grepl(NVC_Match3, pattern= search_strings[i])|
1654102016584:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654102016629:dplyr::pull(CLASS_NAME) )
1654102016661:}
1654102017804:# Load spatial layers (NVC and CDL rasters)
1654102017836:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654102017868:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654102017918:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654102017996:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654102018065:mat <- data.frame(is=NA, becomes=0)
1654102018129:cdl <- terra::classify(cdl, rcl=mat)
1654102019843:##### clip CDL and NVC to smaller area
1654102019869:map <- cdl
1654102019919:# Crop CDL and NVC to small example raster
1654102019950:xpct=c(0.38, 0.395) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654102019986:ypct=c(0.32, 0.335)
1654102020109:# xpct=c(0.675, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654102020146:# ypct=c(0.845, 0.86)
1654102020202:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654102020245:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654102020290:)
1654102020392:cdl <- terra::crop(cdl, y=bbox)
1654102020462:nvc <- terra::crop(nvc, y=bbox)
1654102020673:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654102020710:#cdl[cdl == 61] <- 152
1654102020835:# check if projections of raster tiles are the same. If not, re-project them to match.
1654102020879:if (terra::crs(cdl) != terra::crs(nvc)) {
1654102020921:cdl <- terra::project(x=cdl, y=nvc)
1654102020959:}
1654102021053:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654102021090:'aquaculture', 'pasture', 'fallow')
1654102021201:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654102021236:for (habitat_name in habitat_groups) {
1654102021295:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654102021333:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654102021371:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654102021398:grepl(NVC_Name, pattern=habitat_name)) %>%
1654102021430:dplyr::pull(VALUE)
1654102021525:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654102021603:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654102021635:dplyr::pull(VALUE)
1654102021687:if (habitat_name == habitat_groups[[1]]) {
1654102021729:veglayer_copy <- nvc
1654102021763:}
1654102021840:# create binary layer indicating landfire and cdl match
1654102021911:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654102021968:if (verbose == T) {
1654102022004:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654102022048:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654102022089:}
1654102022163:remove <- (!both_orchard) * veglayer_copy
1654102022217:add <- both_orchard * (-cdl)
1654102022258:veglayer_copy <- remove + add
1654102022301:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654102022347:}
1654102023360:# reclassify remaining NVC ag cells to NA
1654102023402:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654102023445:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654102023518:if (verbose == T) {
1654102023580:logger::log_info('Step 1 complete.')
1654102023628:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654102023660:}
1654102023688:##### Step 2: Assign mismatched pixels based on neighborhood
1654102023739:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654102023805:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654102023858:# terra's 'focal' function only accepts one argument
1654102023905:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654102023991:# Is the option to define crop classes working?
1654102024037:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654102024075:window_size=window_size, replace_any=F)
1654102024724:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654102024805:# create extent object that removes the buffer cells
1654102024851:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654102024893:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654102025014:# subtract buffer distance from tile extent
1654102025059:original_extent <- terra::ext(c(
1654102025100:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654102025146:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654102025188:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654102025235:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654102025291:))
1654102025365:# crop tile to original extent (without buffer pixels)
1654102025401:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654102025484:# cropped version of output from step 1
1654102025529:output_step1 <- terra::crop(temp2, original_extent)
1654102025590:# cropped version of CDL
1654102025640:cdl_tomap <- terra::crop(cdl, original_extent)
1654102025715:# cropped version of NVC
1654102025757:nvc_tomap <- terra::crop(nvc, original_extent)
1654102025818:sort(unique(values(nvc_gapsfilled)))
1654102025900:length(which(values(nvc_gapsfilled) == -1001))
1654102025959:plot(nvc_gapsfilled)
1654102026056:plot(nvc_gapsfilled == -1001)
1654102044734:# this script is the non-function version of merge function
1654102044772:library(raster); library(terra); library(dplyr)
1654102044850:##### input parameters
1654102044892:datadir <- './data' # directory where tabular and spatial data are stored
1654102044936:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654102044990:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654102045059:verbose <- T
1654102045114:veglayer <- 'nvc'
1654102045169:##### Step 0: Setup and load data
1654102045309:# load table of LANDFIRE vegetation classes
1654102045364:if (veglayer == 'evt') {
1654102045414:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654102045461:dplyr::mutate(VALUE = as.character(Value))
1654102045506:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654102045555:} else if (veglayer == 'nvc') {
1654102045603:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654102045650:dplyr::mutate(VALUE = as.character(VALUE))
1654102045716:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654102045759:}
1654102045901:# read CDL class names
1654102045947:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654102045990:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654102046028:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654102046090:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654102046128:dplyr::mutate(VALUE = as.character(-VALUE))
1654102046272:# create derived parameter of window_size
1654102046322:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654102046398:##### Step 1: Assign pixels that exactly match
1654102046495:# create vectors listing which CDL classes match LANDFIRE groups
1654102046558:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654102046604:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654102046673:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654102046727:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654102046852:# names of LANDFIRE classes (simplified) that will be re-assigned
1654102046888:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654102046926:'aquaculture', 'pasture', 'fallow')
1654102046966:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654102047000:'Aquaculture', 'Pasture', 'Fallow')
1654102047086:# create R objects for each LANDFIRE class listing matching CDL classes
1654102047151:for (i in 1:length(habitat_groups)) {
1654102047184:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654102047223:grepl(NVC_Match2, pattern= search_strings[i])|
1654102047258:grepl(NVC_Match3, pattern= search_strings[i])|
1654102047304:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654102047339:dplyr::pull(CLASS_NAME) )
1654102047391:}
1654102048260:# Load spatial layers (NVC and CDL rasters)
1654102048301:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654102048329:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654102048385:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654102048459:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654102048522:mat <- data.frame(is=NA, becomes=0)
1654102048557:cdl <- terra::classify(cdl, rcl=mat)
1654102050074:##### clip CDL and NVC to smaller area
1654102050101:map <- cdl
1654102050156:# Crop CDL and NVC to small example raster
1654102050200:xpct=c(0.38, 0.39) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654102050246:ypct=c(0.32, 0.33)
1654102050361:# xpct=c(0.675, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654102050398:# ypct=c(0.845, 0.86)
1654102050461:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654102050520:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654102050558:)
1654102050692:cdl <- terra::crop(cdl, y=bbox)
1654102050734:nvc <- terra::crop(nvc, y=bbox)
1654102050861:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654102050894:#cdl[cdl == 61] <- 152
1654102050986:# check if projections of raster tiles are the same. If not, re-project them to match.
1654102051018:if (terra::crs(cdl) != terra::crs(nvc)) {
1654102051050:cdl <- terra::project(x=cdl, y=nvc)
1654102051081:}
1654102051224:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654102051301:'aquaculture', 'pasture', 'fallow')
1654102051362:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654102051397:for (habitat_name in habitat_groups) {
1654102051463:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654102051506:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654102051559:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654102051615:grepl(NVC_Name, pattern=habitat_name)) %>%
1654102051646:dplyr::pull(VALUE)
1654102051721:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654102051762:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654102051799:dplyr::pull(VALUE)
1654102051912:if (habitat_name == habitat_groups[[1]]) {
1654102051952:veglayer_copy <- nvc
1654102051985:}
1654102052048:# create binary layer indicating landfire and cdl match
1654102052084:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654102052189:if (verbose == T) {
1654102052255:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654102052326:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654102052386:}
1654102052463:remove <- (!both_orchard) * veglayer_copy
1654102052510:add <- both_orchard * (-cdl)
1654102052571:veglayer_copy <- remove + add
1654102052614:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654102052672:}
1654102053618:# reclassify remaining NVC ag cells to NA
1654102053656:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654102053690:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654102053749:if (verbose == T) {
1654102053779:logger::log_info('Step 1 complete.')
1654102053810:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654102053882:}
1654102053914:##### Step 2: Assign mismatched pixels based on neighborhood
1654102053967:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654102054022:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654102054046:# terra's 'focal' function only accepts one argument
1654102054071:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654102054125:# Is the option to define crop classes working?
1654102054178:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654102054230:window_size=window_size, replace_any=F)
1654102054558:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654102054614:# create extent object that removes the buffer cells
1654102054648:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654102054687:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654102054795:# subtract buffer distance from tile extent
1654102054825:original_extent <- terra::ext(c(
1654102054855:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654102054891:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654102054930:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654102054966:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654102055006:))
1654102055105:# crop tile to original extent (without buffer pixels)
1654102055141:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654102055227:# cropped version of output from step 1
1654102055264:output_step1 <- terra::crop(temp2, original_extent)
1654102055312:# cropped version of CDL
1654102055351:cdl_tomap <- terra::crop(cdl, original_extent)
1654102055431:# cropped version of NVC
1654102055473:nvc_tomap <- terra::crop(nvc, original_extent)
1654102055534:sort(unique(values(nvc_gapsfilled)))
1654102055590:length(which(values(nvc_gapsfilled) == -1001))
1654102055699:plot(nvc_gapsfilled)
1654102055794:plot(nvc_gapsfilled == -1001)
1654102063712:terra::writeRaster(cdl_tomap, './data/SpatialData/ExampleSmallRasters/small_cdl.tif', overwrite=T)
1654102063809:terra::writeRaster(nvc_tomap, './data/SpatialData/ExampleSmallRasters/small_nvc.tif', overwrite=T)
1654102063916:terra::writeRaster(output_step1, './data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif', overwrite=T)
1654102064040:terra::writeRaster(nvc_gapsfilled, './data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif', overwrite=T)
1654102956212:# this script is the non-function version of merge function
1654102956255:library(raster); library(terra); library(dplyr)
1654102956313:##### input parameters
1654102956347:datadir <- './data' # directory where tabular and spatial data are stored
1654102956388:buffercells <- c(3,3)  # number of cells that overlap between raster tiles (in x and y directions)
1654102956425:nvc_agclasses <- c(7960:7999) # classes in LANDFIRE NVC that are agriculture
1654102956470:verbose <- T
1654102956538:veglayer <- 'nvc'
1654102956574:##### Step 0: Setup and load data
1654102956654:# load table of LANDFIRE vegetation classes
1654102956688:if (veglayer == 'evt') {
1654102956731:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/US_105evt_05262011.csv')) %>%
1654102956780:dplyr::mutate(VALUE = as.character(Value))
1654102956819:name_column <- 'EVT_Name'; name_column <- sym(name_column)
1654102956852:} else if (veglayer == 'nvc') {
1654102956896:vegclasses_key <- read.csv(paste0(datadir, '/TabularData/LF_200NVC_05142020.csv')) %>%
1654102956942:dplyr::mutate(VALUE = as.character(VALUE))
1654102957028:name_column <- 'NVC_Name'; name_column <- sym(name_column)
1654102957097:}
1654102957206:# read CDL class names
1654102957240:# cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_simple.csv')) %>%
1654102957271:#   dplyr::filter(VALUE < 500)  %>% #filter out CDL classes that I created for a different project
1654102957341:#   dplyr::mutate(VALUE = as.character(-VALUE))
1654102957459:cdl_classes <- read.csv(paste0(datadir, '/TabularData/NASS_classes_pasture_is_arable.csv')) %>%
1654102957509:dplyr::mutate(VALUE = as.character(-VALUE))
1654102957616:# create derived parameter of window_size
1654102957652:window_size <- (buffercells[1]*2) + 1 # diameter of neighborhood analysis window (part 2 only)
1654102957735:##### Step 1: Assign pixels that exactly match
1654102957860:# create vectors listing which CDL classes match LANDFIRE groups
1654102957908:# groups are: wheat, orchard, berries, vineyard, row crop, close-grown crop, aquaculture, pasture and hayland, and fallow/idle
1654102957955:if (veglayer == 'nvc') {nvc_ag <- dplyr::filter(vegclasses_key, VALUE %in% nvc_agclasses) }
1654102958040:agclass_match <- read.csv(paste0(datadir, '/TabularData/CDL_NVC_AgClassMatch.csv')) %>%
1654102958084:dplyr::select(VALUE, CLASS_NAME, GROUP, NVC_Match1, NVC_Match2, NVC_Match3, NVC_Match4)
1654102958216:# names of LANDFIRE classes (simplified) that will be re-assigned
1654102958277:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654102958317:'aquaculture', 'pasture', 'fallow')
1654102958353:search_strings <- c('Wheat', 'Orchard', "Bush fruit and berries", 'Vineyard', 'Row Crop', 'Close Grown Crop',
1654102958386:'Aquaculture', 'Pasture', 'Fallow')
1654102958448:# create R objects for each LANDFIRE class listing matching CDL classes
1654102958508:for (i in 1:length(habitat_groups)) {
1654102958556:assign(x=habitat_groups[i], value = dplyr::filter(agclass_match, grepl(NVC_Match1, pattern = search_strings[i])|
1654102958590:grepl(NVC_Match2, pattern= search_strings[i])|
1654102958627:grepl(NVC_Match3, pattern= search_strings[i])|
1654102958664:grepl(NVC_Match4, pattern= search_strings[i])) %>%
1654102958698:dplyr::pull(CLASS_NAME) )
1654102958731:}
1654102959513:# Load spatial layers (NVC and CDL rasters)
1654102959547:# path is '../../SpatialData/FingerLakesLandUse on laptop
1654102959582:nvc <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/LandFire_NatVegClassification.tif'))
1654102959672:cdl <- terra::rast(paste0(datadir, '/SpatialData/FingerLakesLandCover/USDA_CDL_2016_FingerLakes.tif'))
1654102959816:#reclassify NA values in CDL to 0 (otherwise landfire values at these locations are not preserved)
1654102959881:# mat <- data.frame(is=NA, becomes=0)
1654102959930:# cdl <- terra::classify(cdl, rcl=mat)
1654102959979:##### clip CDL and NVC to smaller area
1654102960012:map <- cdl
1654102960080:# Crop CDL and NVC to small example raster
1654102960134:xpct=c(0.38, 0.39) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654102960198:ypct=c(0.32, 0.33)
1654102960291:# xpct=c(0.675, 0.69) # new example extent to have mismatch pixel conflict (value of -1001 in final raster)
1654102960320:# ypct=c(0.845, 0.86)
1654102960369:bbox <- ext(c( (xmax(map)-xmin(map))*xpct[1] + xmin(map),  (xmax(map)-xmin(map))*xpct[2] + xmin(map),
1654102960403:(ymax(map)-ymin(map))*ypct[1] + ymin(map),  (ymax(map)-ymin(map))*ypct[2] + ymin(map))
1654102960437:)
1654102960536:cdl <- terra::crop(cdl, y=bbox)
1654102960609:nvc <- terra::crop(nvc, y=bbox)
1654102960732:# reclassify a few CDL fallow cells to shrubland to create unresolvable conflict (for illustration purposes)
1654102960772:#cdl[cdl == 61] <- 152
1654102960865:# check if projections of raster tiles are the same. If not, re-project them to match.
1654102960933:if (terra::crs(cdl) != terra::crs(nvc)) {
1654102960972:cdl <- terra::project(x=cdl, y=nvc)
1654102961002:}
1654102961078:habitat_groups <- c('wheat', 'orchard', 'berries', 'vineyard', 'row_crop', 'close_grown_crop',
1654102961105:'aquaculture', 'pasture', 'fallow')
1654102961156:# For each habitat group, replace LANDFIRE class with CDL pixel class (but only if CDL class matches)
1654102961188:for (habitat_name in habitat_groups) {
1654102961281:# e.g replace NVC orchard class with CDL fruit tree types (when NVC orchard pixels overlap with CDL fruit tree)
1654102961342:nvc_tochange <- dplyr::filter(nvc_ag, grepl(NVC_Name,
1654102961377:pattern= beecoSp::CapStr(gsub(habitat_name, pattern="_", replacement=" ")))|
1654102961408:grepl(NVC_Name, pattern=habitat_name)) %>%
1654102961438:dplyr::pull(VALUE)
1654102961493:cdl_toadd <- dplyr::filter(cdl_classes, CLASS_NAME %in% get(habitat_name)) %>%
1654102961518:dplyr::mutate(VALUE = (as.numeric(VALUE)*-1)) %>%
1654102961561:dplyr::pull(VALUE)
1654102961662:if (habitat_name == habitat_groups[[1]]) {
1654102961741:veglayer_copy <- nvc
1654102961771:}
1654102961813:# create binary layer indicating landfire and cdl match
1654102961838:both_orchard <- (cdl %in% cdl_toadd & veglayer_copy %in% as.numeric(nvc_tochange))
1654102961885:if (verbose == T) {
1654102961913:logger::log_info(paste0("Projection match =", terra::crs(both_orchard) == terra::crs(veglayer_copy)))
1654102961946:logger::log_info(paste0("Extent match =", terra::ext(both_orchard) == terra::ext(veglayer_copy)))
1654102961984:}
1654102962082:remove <- (!both_orchard) * veglayer_copy
1654102962130:add <- both_orchard * (-cdl)
1654102962182:veglayer_copy <- remove + add
1654102962224:if (verbose == T) { logger::log_info(paste0('finished ', habitat_name)) }
1654102962261:}
1654102963395:# reclassify remaining NVC ag cells to NA
1654102963434:reclass <- data.frame(agveg=nvc_agclasses, to=NA)
1654102963474:temp2 <- terra::classify(veglayer_copy, rcl=reclass)
1654102963540:if (verbose == T) {
1654102963577:logger::log_info('Step 1 complete.')
1654102963610:logger::log_info('Begin step 2: assign mis-matched pixel via neighborhood analysis.')
1654102963666:}
1654102963715:##### Step 2: Assign mismatched pixels based on neighborhood
1654102963772:# When possible, reassign remaining NVC ag classes by looking at surrounding cells
1654102963834:# Due to quirk of how the terra package is written, we cannot include this object as an argument to 'merge_landfire_cdl'
1654102963875:# terra's 'focal' function only accepts one argument
1654102963916:allow_classes <- as.numeric(cdl_classes$VALUE[cdl_classes$GROUP == 'A'])
1654102963989:# Is the option to define crop classes working?
1654102964020:nvc_gapsfilled <- beecoSp::reassign_NA(map=temp2,
1654102964061:window_size=window_size, replace_any=F)
1654102964351:##### Step 4: Crop merged tile to extent of original tiles (remove overlap)
1654102964404:# create extent object that removes the buffer cells
1654102964440:delta_x <- terra::res(nvc_gapsfilled)[1]*buffercells[1]
1654102964490:delta_y <- terra::res(nvc_gapsfilled)[2]*buffercells[2]
1654102964571:# subtract buffer distance from tile extent
1654102964604:original_extent <- terra::ext(c(
1654102964646:terra::ext(nvc_gapsfilled)$xmin + delta_x,
1654102964692:terra::ext(nvc_gapsfilled)$xmax - delta_x,
1654102964725:terra::ext(nvc_gapsfilled)$ymin + delta_y,
1654102964797:terra::ext(nvc_gapsfilled)$ymax - delta_y
1654102964837:))
1654102964908:# crop tile to original extent (without buffer pixels)
1654102964948:nvc_gapsfilled <- terra::crop(nvc_gapsfilled, original_extent)
1654102965010:# cropped version of output from step 1
1654102965051:output_step1 <- terra::crop(temp2, original_extent)
1654102965103:# cropped version of CDL
1654102965135:cdl_tomap <- terra::crop(cdl, original_extent)
1654102965198:# cropped version of NVC
1654102965233:nvc_tomap <- terra::crop(nvc, original_extent)
1654102965322:sort(unique(values(nvc_gapsfilled)))
1654102965382:length(which(values(nvc_gapsfilled) == -1001))
1654102965450:plot(nvc_gapsfilled)
1654102965515:plot(nvc_gapsfilled == -1001)
1654102965710:terra::writeRaster(cdl_tomap, './data/SpatialData/ExampleSmallRasters/small_cdl.tif', overwrite=T)
1654102965928:terra::writeRaster(nvc_tomap, './data/SpatialData/ExampleSmallRasters/small_nvc.tif', overwrite=T)
1654102966033:terra::writeRaster(output_step1, './data/SpatialData/ExampleSmallRasters/merged_with_gaps.tif', overwrite=T)
1654102966169:terra::writeRaster(nvc_gapsfilled, './data/SpatialData/ExampleSmallRasters/merged_gapsfilled.tif', overwrite=T)
1654106144479:installed.packages()
1654106161806:SessionInfo()
1654106167693:sessionInfo()
1654106203573:library(terra)
1654106207419:library(raster)
1654106211550:library(rgdal)
1654106351755:library(gdalUtils)
1654106355105:sessionInfo()
1654106392041:library(SpaDES.tools)
1654106395614:sessionInfo()
